taskName,program,nlDescription
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean true)) (lambda (lambda (color_logical $0 $1 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean true)) (lambda (lambda (color_logical $1 $0 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grid_to_block $0))) (lambda (lambda (color_logical $0 $1 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grid_to_block $0))) (lambda (lambda (color_logical $1 $0 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (remove_black_b (grid_to_block $0)))) (lambda (lambda (color_logical $0 $1 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (remove_black_b (grid_to_block $0)))) (lambda (lambda (color_logical $1 $0 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grow (grid_to_block $0) 1))) (lambda (lambda (color_logical $0 $1 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grow (grid_to_block $0) 1))) (lambda (lambda (color_logical $1 $0 red land))))),"look at both the left and right parts of the input grid. You will notice that the left and right parts are 3x3. For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0b148d64.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1))) true)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 1)) true)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1))) false)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 1)) false)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (remove_black_b (remove_black_b (grid_to_block $0))) (nth_primary_color (grid_to_block $0) 1)) true)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (remove_black_b (remove_black_b (grid_to_block $0))) (nth_primary_color (grid_to_block $0) 1)) false)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (remove_black_b (grid_to_block $0)) (nth_primary_color (reflect (grid_to_block $0) true) 1)) true)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (reflect (reflect (remove_black_b (grid_to_block $0)) true) true) (nth_primary_color (grid_to_block $0) 1)) true)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (reflect (reflect (remove_black_b (grid_to_block $0)) true) true) (nth_primary_color (grid_to_block $0) 1)) false)),make it the area that is a different color.
0b148d64.json,(lambda (to_min_grid (remove_color (reflect (reflect (remove_black_b (grid_to_block $0)) false) false) (nth_primary_color (grid_to_block $0) 1)) true)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false false) false false)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) true false) false false)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false false) false true)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false false) true false)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false true) false false)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false false) true true)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false true) false true)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) false true) true false)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) true false) false true)),make it the area that is a different color.
0b148d64.json,(lambda (blocks_to_min_grid (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 2) true false) true false)),make it the area that is a different color.
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (negate_boolean false))),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (negate_boolean true))),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_color (grid_to_block $0) black) false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_color (grid_to_block $0) black) true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (box_block (grid_to_block $0))) false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (box_block (grid_to_block $0))) true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (remove_black_b (grid_to_block $0))) true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (remove_black_b (grid_to_block $0))) false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 true true) true true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 false true) true true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 true false) true true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 true true) false true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 true true) true false)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (blocks_to_min_grid (find_same_color_blocks $0 true false) false true)),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (is_tile (grid_to_block $0)))),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (touches_any_boundary (grid_to_block $0)))),"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid. No color change."
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_width $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_height $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_width $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_width $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_width $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_height $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_height $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 false true) (lambda (get_height $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_width $0)) false) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_height $0)) (negate_boolean true)) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_height $0)) (negate_boolean true)) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 false true) (lambda (get_height $0)) (negate_boolean true)) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_height $0)) (negate_boolean true)) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_width $0)) (negate_boolean true)) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_width $0)) (negate_boolean true)) true)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) (negate_boolean true)) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) (is_tile (grid_to_block $0))) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) (is_tile (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false))) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false) false)),copy only the biggest shape into the output grid copy the small dense part copy the small dense part
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) blue) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (remove_black_b (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true) blue) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) teal) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true) teal) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) grey) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true) grey) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (replace_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true) black red) false))) true true)),fill in the area above the four square base until you get to the top of the colored area
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) (negate_boolean false) false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true (negate_boolean true))),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) (touches_any_boundary (grid_to_block $0)) false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true (is_tile (grid_to_block $0)))),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (remove_black_b (extend_towards_until_edge $0 east)))) true false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) false) true)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda (extend_towards_until_edge $0 east))) true false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge (block_to_tile (tile_to_block $0)) east))) true false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge (get_block_center (tile_to_block $0)) east))) true false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) (touches_any_boundary (replace_color (grid_to_block $0) orange grey)) false)),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true (is_tile (replace_color (grid_to_block $0) orange grey)))),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true (is_tile (wrap_block (grid_to_block $0) invisible false)))),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true (is_tile (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))),"copy the input. If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color. Don't do anything with the blocks across from each other that are different colors"
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_width $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_width $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height (box_block $0))) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height (remove_black_b $0))) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (box_block $0))) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_width (box_block $0))) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_height $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_height $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_width $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_height $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_height $0)) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_height $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_height $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height (fill_color $0 blue))) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (fill_color $0 blue))) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height (fill_color $0 (nth_primary_color (grid_to_block $1) 0)))) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (fill_color $0 (nth_primary_color (grid_to_block $1) 0)))) true) true)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_width $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_width $0)) true) false)),change the grid size with the colored object with the smallest area and fill the same color.
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (center_block_on_tile (grid_to_block $0) (block_to_tile (move_towards_until_edge (get_block_center (grid_to_block $0)) south))) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (center_block_on_tile (grid_to_block $0) (get_block_center (move_towards_until_edge (get_block_center (grid_to_block $0)) south))) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south (negate_boolean true)) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) (negate_boolean true))),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (remove_black_b (move (grid_to_block $0) 1 south false)) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (remove_color (grid_to_block $0) yellow) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (duplicate (grid_to_block $0) east 1) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) orange red) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (filter_block_tiles (move (grid_to_block $0) 1 south false) (lambda true)) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (filter_block_tiles (grid_to_block $0) (lambda true)) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (move (grid_to_block $0) 1 south false))) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (replace_color (move (grid_to_block $0) 1 south false) pink grey) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (replace_color (move (grid_to_block $0) 1 south false) pink red) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (replace_color (move (grid_to_block $0) 1 south false) orange grey) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (replace_color (move (grid_to_block $0) 1 south false) orange red) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (duplicate (grid_to_block $0) north_east 3) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) 1 south false) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south (is_tile (grid_to_block $0))) false)),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) (is_tile (grid_to_block $0)))),move all the blue color move down  by one grid
25ff71a9.json,(lambda (to_original_grid_overlay (remove_black_b (move (grid_to_block $0) 1 south (negate_boolean true))) false)),move all the blue color move down  by one grid
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (singleton_block (find_same_color_blocks $0 true true)) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (singleton_block (find_same_color_blocks $0 true true)) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_same_color_blocks $0 true true) false) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_same_color_blocks $0 true true) true) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 true)))) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true)) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (map_block_tiles (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) (lambda $0)) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_same_color_blocks $0 true true) true) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_same_color_blocks $0 true true) false) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_blocks_by_inferred_b $0 true true) false) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_blocks_by_inferred_b $0 true true) false) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_blocks_by_inferred_b $0 true true) true) east 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (merge_blocks (find_blocks_by_inferred_b $0 true true) true) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) west 1) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) west 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (remove_black_b (grid_to_block $0)))) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (box_block (remove_black_b (grid_to_block $0)))) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true))) east 1) true)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 3 east true)) (lambda (is_exterior $0 true))) false)),copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 3 east true)) (lambda (is_exterior $0 true))) true)),copy the figure two times in that grid size.
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda (get_num_tiles $0)) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (map_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda $0)) (lambda (get_num_tiles $0)) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda true)) (lambda (get_num_tiles $0)) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda (get_num_tiles (remove_color $0 blue))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda (negate_boolean false))) (lambda (get_num_tiles $0)) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda (get_num_tiles (remove_color $0 (nth_primary_color $0 2)))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (map_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda $0)) (lambda (get_num_tiles (remove_color $0 blue))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda true)) (lambda (get_num_tiles (remove_color $0 blue))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda (get_num_tiles (remove_color $0 (nth_primary_color (grid_to_block $1) 2)))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
2dc579da.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 (nth_primary_color (grid_to_block $0) 0) false false) (lambda true)) (lambda (get_num_tiles (remove_color $0 (nth_primary_color $0 2)))) true) true)),"select the quadrant with the different colored square, then copy and paste the quadrant as the output."
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 2) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 2) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 0) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 0) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 3) true) false)),count the number of copies of each shape. Zoom in on the shape with the most copies.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) true) true)),count the number of copies of each shape. Zoom in on the shape with the most copies.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black blue) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) true) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) true) black blue) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black blue) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) true) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) true) black blue) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_blocks_by_inferred_b $0 false true) false) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_blocks_by_inferred_b $0 true true) true) black blue) false)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (find_same_color_blocks $1 true false) false))))) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (move (grid_to_block $1) 3 south true)))))) true)),fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (find_same_color_blocks $1 true false) false))))) true)),fill in the missing corners with a blue square.
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (remove_black_b (grid_to_block $0)) false) true) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (remove_black_b (grid_to_block $0)) true) false) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (remove_black_b (reflect (reflect (grid_to_block $0) true) false)) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (remove_black_b (reflect (reflect (grid_to_block $0) false) true)) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) (negate_boolean false)) false) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) (negate_boolean false)) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) (negate_boolean true)) false)),"Create the same pattern as the input, just rotated 180 degrees. Done."
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) (negate_boolean true)) true)),"Create the same pattern as the input, just rotated 180 degrees. Done."
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) false) false)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) true) true)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) true) true)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) yellow) true) true)) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (remove_black_b (wrap_block (remove_black_b (grid_to_block $0)) blue true)) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (remove_black_b (grid_to_block $0))) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (remove_black_b (wrap_block (remove_black_b (grid_to_block $0)) blue true)) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (remove_black_b (grid_to_block $0))) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue (negate_boolean false)) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) (negate_boolean false))),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (remove_color (grid_to_block $0) blue)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (wrap_block (remove_black_b (grid_to_block $1)) blue true))) true false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 2) true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) (touches_any_boundary (remove_black_b (grid_to_block $0))))),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_color (grid_to_block $0) black) blue true) false)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_color (grid_to_block $0) black) blue true) true)),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) (negate_boolean true))),surround each grey box with blue surround each of the grey boxes with a 3x3 blue border
4347f46a.json,(lambda (blocks_to_original_grid (map_blocks (find_same_color_blocks $0 false false) (lambda (filter_block_tiles $0 (lambda (is_exterior $0 false))))) false true)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) false) false)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) true) true)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) blue) false) false)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) blue) true) true)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (reflect (reflect (grid_to_block $0) true) false) true) false)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (reflect (reflect (grid_to_block $0) true) true) false) false)) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (remove_black_b (grid_to_block $0))) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (remove_black_b (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 true)))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (remove_black_b (grid_to_block $0))) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (merge_blocks (find_same_color_blocks $0 true true) true) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 (is_exterior $0 true)))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 (is_interior $0 true)))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (negate_boolean (is_interior $0 true)))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (merge_blocks (find_blocks_by_inferred_b $0 false false) false) (lambda (is_exterior $0 true))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 false))) (negate_boolean true))),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 true))) (negate_boolean true))),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) false) false)) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (reflect (remove_black_b (grid_to_block $0)) true) true)) (lambda (is_exterior $0 false))) false)),replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes remove the center of the blocks with black and have a single block wide line for each square.
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) false)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles (remove_color $0 teal))) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles (remove_color $0 invisible))) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles (remove_color $0 orange))) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles (remove_color $0 green))) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles (remove_color $0 maroon))) false) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (reflect (reflect (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) false) false) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (filter_block_tiles (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) (lambda (is_exterior $0 false))) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) (is_symmetrical (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) false)) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (remove_black_b (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false)) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
48d8fb45.json,(lambda (to_min_grid (remove_color (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) grey) true)),"repeat the colored area that includes a grey square, but don't include the grey square."
496994bd.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (reflect (grid_to_block $0) false) true)) true)),mirror the top pattern below.
496994bd.json,(lambda (to_original_grid_overlay (reflect (remove_black_b (reflect (grid_to_block $0) true)) false) true)),mirror the top pattern below.
496994bd.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (reflect (grid_to_block $0) true) false)) true)),mirror the top pattern below.
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible false) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) (negate_boolean false))),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) (negate_boolean true))),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible (negate_boolean true)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible (negate_boolean true)) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible false) (negate_boolean false))),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) invisible false) (negate_boolean true))),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (remove_black_b (wrap_block (grid_to_block $0) invisible false)) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (remove_black_b (wrap_block (grid_to_block $0) invisible false)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (remove_black_b (wrap_block (grid_to_block $0) black false)) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (remove_black_b (wrap_block (grid_to_block $0) black false)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (filter_block_tiles (grid_to_block $0) (lambda true)) invisible false) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (filter_block_tiles (wrap_block (grid_to_block $0) invisible false) (lambda true)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (filter_block_tiles (grid_to_block $0) (lambda true)) invisible false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (filter_block_tiles (wrap_block (grid_to_block $0) black false) (lambda true)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (filter_block_tiles (grid_to_block $0) (lambda true)) black false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (merge_blocks (find_same_color_blocks $0 true true) false) invisible false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (merge_blocks (find_same_color_blocks $0 true true) false) black false) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (box_block (wrap_block (grid_to_block $0) black false)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (box_block (wrap_block (grid_to_block $0) invisible false)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black (negate_boolean true)) false)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black (negate_boolean true)) true)),make input pattern as center for output and colors should be same. The adjacent colors are also same . all four corner colors should be black
4c4377d9.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 north true) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (remove_black_b (grid_to_block $0)) true) 3 north true) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 north true)) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (remove_black_b (grid_to_block $0)) true) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 north true)) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) true) true) true) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) false) false) true) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) false) true) false) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) true) false) false) 3 north true) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 north true)) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 north true)) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) true) 3 north true))) true)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 north true)) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) true) 3 north true))) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 north true)) false)),"copy the pattern as you see it on the bottom half of the grid into 3x4. Once done, flip the pattern up to the top half of the 3x4 grid."
50cb2852.json,(lambda (blocks_to_original_grid (map_blocks (find_blocks_by_black_b $0 true false) (lambda (fill_color (filter_block_tiles $0 (lambda (is_interior $0 true))) teal))) true true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (fill_color (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) teal) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true false) false) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) teal) (lambda (is_interior $0 (is_interior $0 true)))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false))) false) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
50cb2852.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) teal) (lambda (is_interior $0 true))) true)),color the inside of each colored area with light blue. Leave the outside of the colored shapes the example color one cube deep all the way around.
5117e062.json,(lambda (to_min_grid (fill_color (merge_blocks (filter_blocks (find_blocks_by_black_b $0 true false) (lambda (has_color $0 teal))) true) (nth_primary_color (merge_blocks (filter_blocks (find_blocks_by_black_b $0 true false) (lambda (has_color $0 teal))) true) 0)) false)),copy the shape with the light blue dot but replace the light blue dot with the shape color.
5521c0d9.json,(lambda (blocks_to_original_grid (map_blocks (find_same_color_blocks $0 true false) (lambda (move $0 (get_height $0) north false))) false true)),decide how many rows the object has and move it up that same amount of rows.
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (remove_black_b (grid_to_block $0)) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (reflect (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (reflect (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (duplicate (grid_to_block $0) east 1) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (move (grid_to_block $0) 1 south false) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (move (grid_to_block $0) 1 south false) (nth_primary_color (grid_to_block $0) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (reflect (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grow (grid_to_block $0) 1) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (replace_color (grid_to_block $0) orange grey) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (replace_color (grid_to_block $0) orange grey) (nth_primary_color (grid_to_block $0) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (replace_color (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) orange grey) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (wrap_block (grid_to_block $0) invisible false) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) (nth_primary_color (grid_to_block $0) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) (negate_boolean false))),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) (negate_boolean true))),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) (negate_boolean false))),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) (negate_boolean true))),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (box_block (remove_black_b (grid_to_block $0))) (nth_primary_color (grid_to_block $0) 0)) false)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
5582e5ca.json,(lambda (to_original_grid_overlay (fill_color (box_block (remove_black_b (grid_to_block $0))) (nth_primary_color (grid_to_block $0) 0)) true)),"determine what color is used the most in the input grid and make the entire output grid that color. determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black orange) false)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black orange) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) true) black orange) false)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) true) black orange) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) (nth_primary_color (grid_to_block $0) 7)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (find_same_color_blocks $1 true false) false))))) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (move (grid_to_block $1) 3 east true)))))) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (move (grid_to_block $1) 3 south true)))))) true)),"keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
6150a2bd.json,(lambda (to_min_grid (reflect (reflect (remove_color (grid_to_block $0) yellow) false) true) false)),"imagine that the entire grid has been flipped both horizontally and vertically. Once you picture it, you can create the output grid. imagine that the entire grid has been flipped both horizontally and vertically. Once you picture that you can create the output grid."
6150a2bd.json,(lambda (to_min_grid (reflect (reflect (remove_color (grid_to_block $0) yellow) true) false) false)),"imagine that the entire grid has been flipped both horizontally and vertically. Once you picture it, you can create the output grid. imagine that the entire grid has been flipped both horizontally and vertically. Once you picture that you can create the output grid."
6150a2bd.json,(lambda (to_original_grid_overlay (reflect (remove_black_b (reflect (grid_to_block $0) true)) false) false)),"imagine that the entire grid has been flipped both horizontally and vertically. Once you picture it, you can create the output grid. imagine that the entire grid has been flipped both horizontally and vertically. Once you picture that you can create the output grid."
6150a2bd.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (reflect (grid_to_block $0) false) true)) false)),"imagine that the entire grid has been flipped both horizontally and vertically. Once you picture it, you can create the output grid. imagine that the entire grid has been flipped both horizontally and vertically. Once you picture that you can create the output grid."
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),"any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true))))) true)),"any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),"any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),"any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) blue) true) true)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),"any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) (negate_boolean true)) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) (negate_boolean true)) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) (negate_boolean false))),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) (negate_boolean true))),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (negate_boolean true)) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (negate_boolean true)) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (remove_black_b (grid_to_block $0)) false) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) false)) true)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (box_block (reflect (grid_to_block $0) false)) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) false) false)),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) (negate_boolean false))),create a left/ right mirror image of the input
67a3c6ac.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) (negate_boolean true))),create a left/ right mirror image of the input
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false) 3 east true)) true) true)),copy-paste the pattern in each corner. The pattern on the bottoms flips parallel to the top.
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) true) 3 south true)) false) true)),copy-paste the pattern in each corner. The pattern on the bottoms flips parallel to the top.
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (reflect (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) false) true) 3 south true)) false) true)),copy-paste the pattern in each corner. The pattern on the bottoms flips parallel to the top.
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (reflect (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) true) false) 3 south true)) false) true)),copy-paste the pattern in each corner. The pattern on the bottoms flips parallel to the top.
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) false)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) true)),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) false)),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) true)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) (negate_boolean false)) false)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) (negate_boolean false)) true)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) (negate_boolean false))),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) (negate_boolean true))),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (negate_boolean false)) false)),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (negate_boolean false)) true)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) true) true)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) true)) true)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) true) false)),flip the input grid vertically
68b16354.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) true)) false)),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) (negate_boolean false))),flip the input grid vertically
68b16354.json,(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) (negate_boolean true))),flip the input grid vertically
6d0aefbc.json,(lambda (to_min_grid (move (reflect (remove_black_b (grid_to_block $0)) false) 3 east true) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (move (remove_black_b (reflect (grid_to_block $0) false)) 3 east true) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) false)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east true)) false)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east true)) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east (negate_boolean false))) false)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east (negate_boolean false))) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (remove_black_b (grid_to_block $0)) false))) 3 east true)) false)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (remove_black_b (grid_to_block $0)) false))) 3 east true)) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (reflect (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east true)) false) false)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (reflect (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) false))) 3 east true)) false) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true))) true)),copy the grid and reflect on the other half
6d0aefbc.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true))) false)),copy the grid and reflect on the other half
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black red) false)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (singleton_block (find_same_color_blocks $0 false true)) black red) false)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black red) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) true) black red) false)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black red) false)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (singleton_block (find_same_color_blocks $0 false true)) black red) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (singleton_block (find_same_color_blocks $0 true true)) black red) false)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black red) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) true) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (find_same_color_blocks $1 true false) false))))) true)),fill in the area of the large section with red to make a rectangular section. Background remain the same color
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_snakewise (grid_to_block $0) (make_colorpair teal teal)) (lambda (is_exterior $0 true))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_snakewise (move (grid_to_block $0) 1 south false) (make_colorpair teal teal)) (lambda (is_exterior $0 true))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 false))) teal) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 false))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 false))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 false))) teal) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 false))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 false))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (fill_color (grid_to_block $0) teal)) (lambda (is_exterior $0 false))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (fill_color (grid_to_block $0) teal)) (lambda (is_exterior $0 false))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 8)) (lambda (is_exterior $0 false))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 8)) (lambda (is_exterior $0 false))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 8)) (lambda (is_exterior $0 false))) false)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 8)) (lambda (is_exterior $0 false))) true)),"use light blue color to draw the border of the grid with only one cell as width Create a light blue border around the grid. So, any tiles that are touching the edges are filled in with light blue. The rest of the tiles remain black. create a light blue border around the grid. So, any squares that are touching the edges are filled in with light blue. The rest of the squares inside the light blue border remain black."
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 south true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 south true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_height (grid_to_block $0)) south true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_width (grid_to_block $0)) south true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_height (grid_to_block $0)) south true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_width (grid_to_block $0)) south true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_original_grid_height (grid_to_block $0)) south true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_original_grid_width (grid_to_block $0)) south true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_original_grid_height (grid_to_block $0)) south true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) (get_original_grid_width (grid_to_block $0)) south true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south true)) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south true)) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south (negate_boolean false))) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south (negate_boolean false))) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (remove_black_b (grid_to_block $0)) true))) 3 south true)) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (remove_black_b (grid_to_block $0)) true))) 3 south true)) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (reflect (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south true)) true) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (reflect (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 south true)) true) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 south true)) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true))) true)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 south true)) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (box_block (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true))) false)),place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
72ca375d.json,(lambda (blocks_to_min_grid (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_tile $0))) false false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) true)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false)))) true)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false)))) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (reflect (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) false) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) true) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false))) (lambda (is_symmetrical $0 false)))) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (is_symmetrical $0 false)))) false)),copy one of the figures and just that figure copy one of the figures and just that figure.
7468f01a.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) (negate_boolean true)) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) (negate_boolean true)) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) (negate_boolean true))) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) (negate_boolean true))) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) (negate_boolean false))),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) (negate_boolean true))),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (remove_black_b (grid_to_block $0)) false)) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (remove_black_b (reflect (grid_to_block $0) false))) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (remove_black_b (remove_black_b (grid_to_block $0))) false) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (remove_black_b (remove_black_b (grid_to_block $0))) false) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (reflect (remove_black_b (grid_to_block $0)) false)) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_black_b (remove_black_b (reflect (grid_to_block $0) false))) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (merge_blocks (find_same_color_blocks $0 false false) false) false) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (merge_blocks (find_same_color_blocks $0 false false) false) false) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (merge_blocks (find_same_color_blocks $0 false true) false) false) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (merge_blocks (find_same_color_blocks $0 true false) false) false) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) black) false) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_color (reflect (grid_to_block $0) false) black) false)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (remove_color (reflect (grid_to_block $0) false) black) true)),The output is the colored shape inverted to the side.
7468f01a.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) black) false) true)),The output is the colored shape inverted to the side.
88a10436.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles $0)) false) $0))) true true)),"copy the input 3x3 multi-colored shape ontop of the gray square, this square comprises the MIDDLE of the 3x3 copy."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (negate_boolean (has_color (grid_to_block $0) blue))) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (grid_to_block $0) blue)) true)) true)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (grid_to_block $0) blue)) true)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_rectangle (remove_color (grid_to_block $0) blue) false)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (reflect (grid_to_block $0) true) blue)) true)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (reflect (grid_to_block $0) false) blue)) true)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (has_color (replace_color (grid_to_block $0) teal red) red)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (has_color (remove_color (grid_to_block $0) blue) (nth_primary_color (grid_to_block $0) 1))) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (touches_boundary (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false) north)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (touches_boundary (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false) north_east)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (grid_to_block $0) blue)) true)) true)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_rectangle (remove_color (grid_to_block $0) blue) true)) false)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
88a62173.json,(lambda (to_min_grid (box_block (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (is_interior (get_block_center (remove_color (grid_to_block $0) blue)) true))) true)),"replicate one of the patterns in one of the corners. Bottom right, bottom left, top right, or top left."
8be77c9e.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) false) true) false) 3 south true)) true)),mirror the grid on the new grid.
8be77c9e.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) false) false) 3 south true)) true)),mirror the grid on the new grid.
8be77c9e.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) true) true) 3 south true)) true)),mirror the grid on the new grid.
8be77c9e.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) false) false) 3 south true)) false)),mirror the grid on the new grid.
8be77c9e.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) true) true) 3 south true)) false)),mirror the grid on the new grid.
8be77c9e.json,(lambda (to_min_grid (box_block (move (box_block (move (reflect (grid_to_block $0) true) 3 south true)) 3 north true)) false)),mirror the grid on the new grid.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles (remove_color $0 blue))) false) true)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) true)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (reflect (remove_color $0 blue) false))) false) true)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) grey) false)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) grey) true)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) yellow) false)),make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) yellow) true)),make the grid the same size as the shape and the two colors are just like in the shape.
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) (negate_boolean false))),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) (negate_boolean true))),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) (is_tile (grid_to_block $0)))),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) (touches_any_boundary (grid_to_block $0)))),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 2) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 2)) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 2)) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (filter_block_tiles (grid_to_block $0) (lambda true)) 2) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (filter_block_tiles (grow (grid_to_block $0) 2) (lambda true)) true)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (filter_block_tiles (grid_to_block $0) (lambda true)) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false false) false) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9172f3a0.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false false) true) 2) false)),"copy the same colors in the same position. For every single grid in the input, it should be changed to a 3x3 of color each in the output. use the same colors in the same position."
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) true) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) true) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) false) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) grey) (lambda true)) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) grey) (negate_boolean false))),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) blue) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) teal) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) grey) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) false) grey) (lambda (is_exterior $0 true))) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) true) blue) grey) true)),keep the color with the most squares and everything else should be gray.
9565186b.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) false) grey) (lambda true)) true)),keep the color with the most squares and everything else should be gray.
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean false)) (lambda (lambda (color_logical $0 $1 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean false)) (lambda (lambda (color_logical $1 $0 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (grid_to_block $0))) (lambda (lambda (color_logical $0 $1 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (grid_to_block $0))) (lambda (lambda (color_logical $1 $0 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 (color_logical $1 $1 green lor) green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 (color_logical $0 $0 green lor) green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (move (grid_to_block $0) 1 south false))) (lambda (lambda (color_logical $0 $1 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (move (grid_to_block $0) 1 south false))) (lambda (lambda (color_logical $1 $0 green lxor))))),"compare the squares in the top and bottom 4x4 square. If they match (both black or both color) make the output square black. If they do not match, make the output square green."
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),fill the black spots with the exact same pattern that need to be filled in the original grid.
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill the black spots with the exact same pattern that need to be filled in the original grid.
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) false) true)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill the black spots with the exact same pattern that need to be filled in the original grid.
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),fill the black spots with the exact same pattern that need to be filled in the original grid.
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),fill the black spots with the exact same pattern that need to be filled in the original grid.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) (negate_boolean false))),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) (negate_boolean true))),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) (negate_boolean false))),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) (negate_boolean true))),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) west 1) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) west 1) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (filter_block_tiles (grid_to_block $0) (lambda true)) east 1) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (filter_block_tiles (duplicate (grid_to_block $0) east 1) (lambda true)) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (move (grid_to_block $0) (get_width (grid_to_block $0)) east true) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (filter_block_tiles (grid_to_block $0) (lambda true)) east 1) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (filter_block_tiles (duplicate (grid_to_block $0) east 1) (lambda true)) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (box_block (duplicate (grid_to_block $0) east 1)) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (move (grid_to_block $0) (get_width (grid_to_block $0)) east true) false)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a416b8f3.json,(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) true)),place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.
a5313dff.json,(lambda (blocks_to_original_grid (map_blocks (filter_blocks (find_blocks_by_color $0 black false false) (lambda (negate_boolean (touches_any_boundary $0)))) (lambda (fill_color $0 blue))) true true)),changed the grid and the color.
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false true)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true false) false false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true false) false true)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) (negate_boolean true))),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) blue)) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (remove_color (box_block (grid_to_block $0)) blue) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) (is_tile (grid_to_block $0)))),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (remove_color (remove_black_b (grid_to_block $0)) blue) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (merge_blocks (find_blocks_by_inferred_b $0 true false) true) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (merge_blocks (find_blocks_by_inferred_b $0 true false) false) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (to_min_grid (merge_blocks (find_blocks_by_inferred_b $0 false false) false) false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (negate_boolean false) false) false false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false (negate_boolean false))),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (negate_boolean true) false) false false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false (negate_boolean true)) false false)),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a740d043.json,(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false (negate_boolean true))),"make the pattern and if there is any more on the sides or any blue, fill in with black."
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) teal red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (fill_snakewise (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) true) (make_colorpair red red)) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (remove_black_b (grid_to_block $0)) teal red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1) red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) teal red) 1 south (negate_boolean true)) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (box_block (replace_color (grid_to_block $0) teal red)) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (duplicate (grid_to_block $0) east 1) teal red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (move (replace_color (grid_to_block $0) teal red) 1 south false)) (lambda (is_exterior $0 true))) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) teal red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (singleton_block (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false)))) teal red) 1 south false) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (grid_to_block $0) 1 south false)) red) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (move (grid_to_block $0) 1 south false)) red) (lambda (is_exterior $0 false))) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (reflect (reflect (grid_to_block $0) false) false) 1 south false)) red) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (reflect (reflect (grid_to_block $0) true) true) 1 south false)) red) false)),Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (wrap_block (remove_black_b (move (grid_to_block $0) 1 south false)) invisible true) red) (lambda (is_interior $0 true))) false)),Move colored square one line down and change to red.
a87f7484.json,(lambda (to_min_grid (remove_black_b (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false)) true)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_black_b $0))) false) true)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_black_b $0))) false) true)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_black_b $0))) false) false)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_black_b $0))) false) false)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda true)) (lambda (get_num_tiles $0)) false) true)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (first_of_sorted_object_list (map_blocks (find_same_color_blocks $0 true false) (lambda $0)) (lambda (get_num_tiles $0)) false) true)),find the color with the most spaces colored and put that pattern into the 3x3.
a87f7484.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false) blue) false)),find the color with the most spaces colored and put that pattern into the 3x3.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) 0)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) 0)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) true) 0)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) true) 0)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true (negate_boolean true)) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue (negate_boolean false) false) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (box_block (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false)) false)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true (is_tile (grid_to_block $0))) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) yellow) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (filter_block_tiles (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) (lambda (is_exterior $0 true))) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) (nth_primary_color (grid_to_block $0) 1)) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true (is_tile (grow (remove_black_b (grid_to_block $0)) 1))) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true (is_symmetrical (duplicate (grid_to_block $0) east 1) false)) (lambda (get_num_tiles $0)) false) true)),copy the 3x3 square from the input grid that has the most blue pixels.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 false false) (lambda (get_num_tiles (remove_color $0 blue))) true) false)),copy the 3x3 square from the input grid that has the most blue pixels.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (tile_to_block $0) blue))) true false)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (tile_to_block $0) blue))) true true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (tile_to_block (get_block_center (tile_to_block $0))) blue))) true true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (fill_color (tile_to_block $0) blue) blue))) true false)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (fill_color (tile_to_block $0) blue) blue))) true true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (tile_to_block $0) (nth_primary_color (grid_to_block $1) 2)))) true false)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (tile_to_block $0) (nth_primary_color (grid_to_block $1) 2)))) true true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (fill_color (tile_to_block $0) (nth_primary_color (grid_to_block $1) 0)) blue))) true false)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) red blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true)) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) red blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) false) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color $0 blue))) true false)),color smaller shapes dark blue.
aedd82e4.json,(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color $0 blue))) true true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (negate_boolean false)) blue) true)),color smaller shapes dark blue.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (negate_boolean true)) blue) true)),color smaller shapes dark blue.
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) (negate_boolean false))),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) (negate_boolean true))),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) (negate_boolean false))),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) (negate_boolean true))),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) false)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) pink red)) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) pink red) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) pink red)) false)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) pink red) false)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (remove_black_b (replace_color (grid_to_block $0) pink red)) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_original_grid_overlay (replace_color (remove_black_b (grid_to_block $0)) pink red) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (fill_color (remove_color (grid_to_block $0) orange) red) true)),turn the not-orange color into light red.
b1948b0a.json,(lambda (to_min_grid (replace_color (box_block (grid_to_block $0)) pink red) false)),turn the not-orange color into light red.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (remove_color (reflect (grid_to_block $0) false) yellow) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (reflect (remove_color (grid_to_block $0) yellow) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (remove_color (reflect (grid_to_block $0) false) yellow) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (remove_black_b (reflect (remove_color (grid_to_block $0) yellow) false)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (remove_color (grid_to_block $0) yellow) false)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (reflect (remove_color (grid_to_block $0) yellow) false) true) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (reflect (remove_color (grid_to_block $0) yellow) true) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) yellow) false) true)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) yellow) true) false)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (replace_color (grid_to_block $0) yellow invisible) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (replace_color (reflect (grid_to_block $0) false) yellow invisible) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (remove_black_b (grid_to_block $0)) yellow) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (remove_black_b (remove_color (reflect (grid_to_block $0) false) yellow)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (remove_color (reflect (remove_black_b (grid_to_block $0)) false) yellow) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) (negate_boolean false))),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) (negate_boolean true)) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_black_b (remove_color (grid_to_block $0) yellow)) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) (touches_any_boundary (grid_to_block $0)))),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) (is_tile (grid_to_block $0))) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (replace_color (reflect (grid_to_block $0) false) yellow invisible) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_original_grid_overlay (reflect (replace_color (grid_to_block $0) yellow invisible) false) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
b8825c91.json,(lambda (to_min_grid (remove_color (reflect (grid_to_block $0) (negate_boolean true)) yellow) true)),remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) red) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) red) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 3)) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) red) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) red) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (reflect (reflect (remove_color (grid_to_block $0) blue) true) true)) red) (lambda (is_interior $0 true))) true)),"color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) false) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 false false) (lambda (get_num_tiles $0)) false) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 true false) (lambda (get_num_tiles $0)) false) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_inferred_b $0 false false) (lambda (get_num_tiles $0)) false) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 true false) (lambda (get_num_tiles $0)) false) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_num_tiles $0)) false) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_num_tiles $0)) (negate_boolean true)) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 false false) (lambda (get_num_tiles $0)) (negate_boolean true)) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 true false) (lambda (get_num_tiles $0)) (negate_boolean true)) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_black_b $0 true false) (lambda (get_num_tiles $0)) (negate_boolean true)) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) (negate_boolean true)) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (negate_boolean true)) true)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (box_block (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false)) false)),fully zoomed pattern of a highest color count among the gird.
be94b721.json,(lambda (to_min_grid (remove_black_b (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) false)) false)),fully zoomed pattern of a highest color count among the gird.
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) true)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) (negate_boolean false))),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) (negate_boolean true))),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) true)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) true)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) (is_tile (grid_to_block $0)))),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) (touches_any_boundary (grid_to_block $0)))),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 1)) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (filter_block_tiles (grow (grid_to_block $0) 1) (lambda true)) true)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (filter_block_tiles (grid_to_block $0) (lambda true)) 1) true)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (filter_block_tiles (grow (grid_to_block $0) 1) (lambda true)) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (filter_block_tiles (grid_to_block $0) (lambda true)) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false false) false) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false false) true) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false true) false) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c59eb873.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 true false) false) 1) false)),"divide each block  into a 2x2 square in the same color as the original block. So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) (negate_boolean false))),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) (negate_boolean true))),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) (negate_boolean false))),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) (negate_boolean true))),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) false)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) orange grey)) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) orange grey) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) orange grey)) false)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) orange grey) false)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (remove_black_b (replace_color (grid_to_block $0) orange grey)) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (replace_color (remove_black_b (grid_to_block $0)) orange grey) true)),replace yellow grid with grey.
c8f0f002.json,(lambda (to_original_grid_overlay (box_block (replace_color (grid_to_block $0) orange grey)) true)),replace yellow grid with grey.
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) true)),count the number of squares in the colored border and resize the output to that number. Then you color all the blocks to match the input.
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_color (grid_to_block $1) (nth_primary_color $0 0)))) false) true)),count the number of squares in the colored border and resize the output to that number. Then you color all the blocks to match the input.
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_color (grid_to_block $1) (nth_primary_color $0 0)))) (has_color (grid_to_block $0) orange)) true)),count the number of squares in the colored border and resize the output to that number. Then you color all the blocks to match the input.
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_color (grid_to_block $1) (nth_primary_color $0 0)))) (has_color (grid_to_block $0) maroon)) true)),count the number of squares in the colored border and resize the output to that number. Then you color all the blocks to match the input.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) 3 east true) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) 3 east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_height (grid_to_block $0)) east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_width (grid_to_block $0)) east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_height (grid_to_block $0)) east true) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_width (grid_to_block $0)) east true) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_original_grid_height (grid_to_block $0)) east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) (get_original_grid_width (grid_to_block $0)) east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) false) true) true) 3 east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (move (reflect (reflect (reflect (grid_to_block $0) true) false) true) 3 east true) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) false) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) false) 3 east true)) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) false) true) true) 3 east true)) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) false) true) 3 east true)) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) true) false) 3 east true)) true)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (remove_color (grid_to_block $0) blue) false) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (remove_color (grid_to_block $0) yellow) false) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) false) true) true) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) false) true) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (reflect (reflect (grid_to_block $0) true) true) false) 3 east true)) false)),create a left-right mirror of pattern of the orange shape. make the pattern mirror as left-right with the same height and twice the row.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) blue true) blue))) true false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) blue true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) invisible true) blue))) true false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) invisible true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) false) false)) blue true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) false) false)) invisible true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) true) true)) blue true) blue))) true false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) true) true)) blue true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) true) true)) invisible true) blue))) true false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (reflect (reflect (grid_to_block $1) true) true)) invisible true) blue))) true true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) blue true) blue) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) blue true) blue) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) invisible true) blue) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) invisible true) blue) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) black true) blue) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) black true) blue) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 1) true) blue) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) black true) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) black true) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) blue true) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) blue true) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue) blue true) false)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (wrap_block (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue) blue true) true)),change every gray square and the 9 squares that go all around it into blue. change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean false)) (lambda (lambda (color_logical $0 $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean false)) (lambda (lambda (color_logical $1 $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (grid_to_block $0))) (lambda (lambda (color_logical $0 $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (grid_to_block $0))) (lambda (lambda (color_logical $1 $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 (color_logical $0 $1 green lxor) green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 (color_logical $1 $0 green lxor) green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (move (grid_to_block $0) 1 south false))) (lambda (lambda (color_logical $0 $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 (touches_any_boundary (move (grid_to_block $0) 1 south false))) (lambda (lambda (color_logical $1 $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical (color_logical $0 $0 green lor) $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical (color_logical $0 $1 green lor) $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical (color_logical $0 $1 green lor) $1 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical (color_logical $1 $0 green lor) $0 green lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 (color_logical $0 $1 green lor) lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 (color_logical $1 $0 green lor) lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 (color_logical $0 $1 green lor) lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 (color_logical $1 $0 green lor) lor))))),"consider the long input as two sections as 4x4 grids, consider that the two sections as one. then the leave that black spaces as black then point the colored blocks as green."
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (touches_boundary (tile_to_block $0) south))))) false true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) false false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) false true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) true false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) true true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda (extend_towards_until_edge $0 south))) false false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 7) false)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) true)),wherever you see a color other than black make squares below that color the same color down to the border.
d037b0a7.json,(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true)),wherever you see a color other than black make squares below that color the same color down to the border.
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0)) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) false) (nth_primary_color (grid_to_block $1) 0)))) true false)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) false) (nth_primary_color (grid_to_block $1) 0)))) true true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) true) (nth_primary_color (grid_to_block $1) 0)))) true false)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) true) (nth_primary_color (grid_to_block $1) 0)))) true true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) (is_exterior $0 true)) (nth_primary_color (grid_to_block $1) 0)))) true false)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) (is_exterior $0 true)) (nth_primary_color (grid_to_block $1) 0)))) true true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) (is_interior $0 true)) (nth_primary_color (grid_to_block $1) 0)))) true false)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $1 false)) (is_interior $0 true)) (nth_primary_color (grid_to_block $1) 0)))) true true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) false) black) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (reflect (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black) false) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (box_block (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black)) false)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0)) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (remove_color (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black) blue) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (fill_color (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) black) black) true)),"turn everything black, but keep the middle vertical line of colored squares."
d23f8c26.json,(lambda (to_min_grid (box_block (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0))) false)),"turn everything black, but keep the middle vertical line of colored squares."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles $0)) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true false) (lambda (get_num_tiles $0)) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles $0)) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true false) (lambda (get_num_tiles (remove_color $0 grey))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (remove_color $0 grey))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true false) (lambda (get_num_tiles (remove_color $0 yellow))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (remove_color $0 yellow))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles (remove_color $0 grey))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles (remove_color $0 yellow))) false) false))) true true)),"copy the input grid. Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line. Use the color of the square to which you are connecting the 2x2 green square. Fill in all of the black squares between that square and the 2x2 green square. Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (is_interior $0 true))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) true) green) (lambda (is_interior $0 true))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true true) false) green) (lambda (is_interior $0 true))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (find_same_color_blocks $1 true false) false))))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (move (reflect (grid_to_block $1) true) 1 east true)))))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (move (reflect (grid_to_block $1) true) 1 south true)))))) false)),"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) true)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (remove_black_b (grid_to_block $0)) false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (remove_black_b (grid_to_block $0)) true)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) false) false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) false) true)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (reflect (grid_to_block $0) true) true)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (remove_black_b (grid_to_block $0))) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (remove_black_b (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true)))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (remove_black_b (grid_to_block $0))) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (remove_black_b (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true)))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) true)) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (merge_blocks (find_same_color_blocks $0 false false) false) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) (has_color (grid_to_block $0) teal)) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda 1) (has_color (remove_color (grid_to_block $0) blue) teal)) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) (has_color (remove_color (grid_to_block $0) blue) teal)) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda 1) (has_color (move (grid_to_block $0) 1 south false) teal)) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) (has_color (move (grid_to_block $0) 1 south false) teal)) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (box_block (remove_black_b (grow (grid_to_block $0) 1))) 2) false false) (lambda 1) true) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 (nth_primary_color (box_block (remove_black_b (grow (grid_to_block $0) 1))) 2) false false) (lambda (get_num_tiles $0)) true) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles (remove_color (box_block (duplicate $0 north_east 3)) blue))) true) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles (remove_color (box_block (duplicate $0 north_east 3)) blue))) true) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 1 south false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 1 south false)) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 3 south false)) (lambda (is_interior $0 true))) false)),zoom into the different colored center block from the input grid and make it the only colored block.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (move (grid_to_block $0) 3 south false)) (lambda (is_interior $0 true))) true)),zoom into the different colored center block from the input grid and make it the only colored block.
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean true)) (lambda (lambda (color_logical $0 $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (negate_boolean true)) (lambda (lambda (color_logical $1 $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grid_to_block $0))) (lambda (lambda (color_logical $0 $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grid_to_block $0))) (lambda (lambda (color_logical $1 $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (remove_black_b (grid_to_block $0)))) (lambda (lambda (color_logical $0 $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (remove_black_b (grid_to_block $0)))) (lambda (lambda (color_logical $1 $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grow (grid_to_block $0) 1))) (lambda (lambda (color_logical $0 $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 (is_tile (grow (grid_to_block $0) 1))) (lambda (lambda (color_logical $1 $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 (color_logical $0 $1 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 (color_logical $1 $0 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 (color_logical $1 $1 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 (color_logical $0 $0 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 (color_logical $0 $1 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 (color_logical $1 $0 pink lor) pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical (color_logical $0 $0 pink lor) $1 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical (color_logical $0 $1 pink lor) $0 pink lor))))),"copy and paste the left-side of the input (the yellow side) onto the output grid. Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow). Your output grid should now have green and yellow on a black background. Then, recolor each green and yellow square pink, so your output is only pink and black."
ded97339.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (extend_until_touches_block $1 $0 false))) false) false))) true true)),connect the magenta boxes that are directly vertical and horizontal to each other.
f25fbde4.json,(lambda (to_min_grid (grow (merge_blocks (find_blocks_by_black_b $0 true false) true) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) (negate_boolean true))),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (remove_color (grid_to_block $0) black) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 1)) (negate_boolean true))),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_color (grow (grid_to_block $0) 1) black) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) true)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (remove_black_b (box_block (grid_to_block $0))) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) (is_tile (grid_to_block $0)))),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (remove_black_b (remove_black_b (grid_to_block $0))) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_black_b (grow (remove_black_b (grid_to_block $0)) 1)) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_black_b (remove_black_b (grow (grid_to_block $0) 1))) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (singleton_block (find_same_color_blocks $0 true true)) 1) true)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 true true) true) 1) true)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (singleton_block (find_same_color_blocks $0 true true)) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 false true) true) 1) true)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (merge_blocks (find_same_color_blocks $0 true true) true) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (singleton_block (find_blocks_by_inferred_b $0 true false)) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_color (remove_black_b (grow (grid_to_block $0) 1)) blue) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_color (remove_black_b (grow (grid_to_block $0) 1)) teal) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_black_b (grow (replace_color (grid_to_block $0) pink grey) 1)) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (remove_black_b (grow (replace_color (grid_to_block $0) orange grey) 1)) false)),Copy the colored shape but make it twice the size as the input shape.
f25fbde4.json,(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) false)),Copy the colored shape but make it twice the size as the input shape.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (negate_boolean false))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) (negate_boolean false))),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_color (reflect (grid_to_block $0) true) black) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (box_block (remove_black_b (reflect (grid_to_block $0) true))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (box_block (reflect (grid_to_block $0) true))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) (touches_any_boundary (grid_to_block $0)))),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (reflect (grid_to_block $0) true))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) true)) (lambda true)) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (filter_block_tiles (reflect (grid_to_block $0) true) (lambda true))) true)),reflect down side to top.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (filter_block_tiles (grid_to_block $0) (lambda true)) true)) true)),reflect down side to top.
fcb5c309.json,(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) (nth_primary_color (remove_black_b (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false)) 0) (nth_primary_color (remove_black_b (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false)) 0)) false)),copy the largest squared border including colored squares inside but make all colored squares the same color as interior squares.
