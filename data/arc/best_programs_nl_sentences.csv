,program,phrase_kind,natural_language
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land))))),grid_size,should be 3x3
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land))))),input,a grid with a gray line down the center
0520fde7.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land))))),output," look at both the left and right parts of the input grid.||You will notice that the left and right parts are 3x3.||For each square that is colored on both the left and right parts, color the output grid with red on the new 3x3."
0b148d64.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1))) true)),grid_size,becomes the size of the pattern that is a different color.|| become size of the different color area.
0b148d64.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1))) true)),input,"a rectangular pattern in each corner, one a different color than the others.|| four colored area.||One different from others."
0b148d64.json,(lambda (to_min_grid (remove_black_b (remove_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 1))) true)),output,copy the pattern that is a different color|| make it the area that is a different color.
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false)),grid_size,it becomes the size of the colored image.
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false)),input,a colored image on a black grid.
1cf80156.json,(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false)),output,"you just need to make sure the colored image is exactly (top, bottom, left, right) in the new grid.||No color change."
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) true)),grid_size,same size as the significant pattern.|| is the size of the height and width of the biggest colored shape.||is the size of the small dense part|| is the size of the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) true)),input,large areas with one significant colored pattern different than its background.|| a grid with many shapes in it including one which is the biggest and is a different color||a dense color block inside the big back ground|| a dense color block inside the big back ground
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) true)),output,copy the significant pattern.|| copy only the biggest shape into the output grid||copy the small dense part||copy the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) false) false)),grid_size,same size as the significant pattern.|| is the size of the height and width of the biggest colored shape.||is the size of the small dense part|| is the size of the small dense part
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) false) false)),input,large areas with one significant colored pattern different than its background.|| a grid with many shapes in it including one which is the biggest and is a different color||a dense color block inside the big back ground|| a dense color block inside the big back ground
1f85a75f.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false false) (lambda (get_num_tiles $0)) false) false)),output,copy the significant pattern.|| copy only the biggest shape into the output grid||copy the small dense part||copy the small dense part
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) false))) true true)),grid_size,should be the same as the input
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) false))) true true)),input,a box of color with colored shapes up from each side.
22168020.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false) false))) true true)),output,fill in the area above the four square base until you get to the top of the colored area
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true false)),grid_size,stays the same size as the input.
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true false)),input,single pixels of different colors in two horizontal lines along the left and right sides of the grid.
22eb0ac0.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 east))) true false)),output,"copy the input.||If two blocks across from each other are the same color, fill in the rest of that horizontal row with that color.||Don't do anything with the blocks across from each other that are different colors"
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height $0)) true) false)),grid_size,should be the one colored object with the smallest area.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height $0)) true) false)),input,different colored objects in the grid.
23b5c85d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_height $0)) true) false)),output,change the grid size with the colored object with the smallest area and fill the same color.
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)),grid_size,same as input size
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)),input,3 by 3 grid blue color grid on black background
25ff71a9.json,(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)),output,move all the blue color move down  by one grid
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) east 1) false)),grid_size,3 up and 6 to the sides.||3 up and 6 to the sides
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) east 1) false)),input,a figure on a big grid.||a figure on a big grid
28bf18c6.json,(lambda (to_min_grid (duplicate (box_block (remove_black_b (grid_to_block $0))) east 1) false)),output,copy the figure two times in that grid size.||copy the figure two times in that grid size.
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true)),grid_size,3 up and 6 to the sides.||3 up and 6 to the sides
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true)),input,a figure on a big grid.||a figure on a big grid
28bf18c6.json,(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true)),output,copy the figure two times in that grid size.||copy the figure two times in that grid size.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) false)),grid_size, is 3x3
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) false)),input, a few different kinds of 3x3 shape.||Each kind should have a unique shape and color.||There may be multiple copies of each kind.
39a8645d.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda 1) true) false)),output, count the number of copies of each shape.||Zoom in on the shape with the most copies.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black blue) false)),grid_size,is identical
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black blue) false)),input,three incomplete squares that are each missing a corner.
3aa6fb7a.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black blue) false)),output,fill in the missing corners with a blue square.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),grid_size,is identical
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),input,three incomplete squares that are each missing a corner.
3aa6fb7a.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) blue) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),output,fill in the missing corners with a blue square.
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)),grid_size, is the same as the input.
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)),input, a grid of colored pixels.
3c9b0459.json,(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)),output,"Create the same pattern as the input, just rotated 180 degrees.||Done."
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) false)),grid_size,is the same as input||is the same as the input||is the same as the input
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) false)),input,a black grid with a number of grey boxes||a black grid with a number of grey boxes||a black grid the a number of grey boxes
4258a5f9.json,(lambda (to_original_grid_overlay (wrap_block (remove_black_b (grid_to_block $0)) blue true) false)),output,surround each of the grey boxes with a blue border||surround each grey box with blue||surround each of the grey boxes with a 3x3 blue border
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 false))) false)),grid_size,same size||is the same as the input grid size||stay the same
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 false))) false)),input, different colored squares||colored rectangular shapes on a black background||different color squares with a black background
4347f46a.json,(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_exterior $0 false))) false)),output,make black squares in the square||replace all colored blocks inside the rectangular shapes with black so there is only a colored outline of the shapes||remove the center of the blocks with black and have a single block wide line for each square.
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) false)),grid_size,is 3x3|| is 3x3 grid.
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) false)),input,a 10x10 grid with different areas colored.||One of those areas includes a grey square.|| a same grid with different areas colored.||One of those areas includes a grey square.
48d8fb45.json,(lambda (to_min_grid (remove_color (first_of_sorted_object_list (find_blocks_by_inferred_b $0 true false) (lambda (get_num_tiles $0)) false) grey) false)),output,"repeat the colored area that includes a grey square, but do not include the gray square.|| repeat the colored area that includes a grey square, but don't include the grey square."
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) false)),grid_size,"should be input size with one more grid is 3x3 change into 5x5 , 2x2 change into 4x4 like 2x3 change into 4x5"
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) false)),input,the grid size.||The input grid size is the center size for output grid.
49d1d64f.json,(lambda (to_min_grid (wrap_block (grid_to_block $0) black false) false)),output,make input pattern as center for output and colors should be same.||The adjacent colors are also same .||all four corner colors should be black
4c4377d9.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 north true) true)),grid_size,changes to 4x6
4c4377d9.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 north true) true)),input,grid of 3x4 with 2 colors.
4c4377d9.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 north true) true)),output,"copy the pattern as you see it on the bottom half of the grid into 3x4.||Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 north true)) true)),grid_size,changes to 4x6
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 north true)) true)),input,grid of 3x4 with 2 colors.
4c4377d9.json,(lambda (to_min_grid (remove_black_b (move (box_block (remove_black_b (reflect (grid_to_block $0) true))) 3 north true)) true)),output,"copy the pattern as you see it on the bottom half of the grid into 3x4.||Once done, flip the pattern up to the top half of the 3x4 grid."
4c4377d9.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 north true)) true)),grid_size,changes to 4x6
4c4377d9.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 north true)) true)),input,grid of 3x4 with 2 colors.
4c4377d9.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 north true)) true)),output,"copy the pattern as you see it on the bottom half of the grid into 3x4.||Once done, flip the pattern up to the top half of the 3x4 grid."
50cb2852.json,(lambda (to_original_grid_overlay (fill_color (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) teal) true)),grid_size,the same
50cb2852.json,(lambda (to_original_grid_overlay (fill_color (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) teal) true)),input,colored areas
50cb2852.json,(lambda (to_original_grid_overlay (fill_color (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) teal) true)),output,color the inside of each colored area with light blue.||Leave the outside of the colored shapes the example color one cube deep all the way around.
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)),grid_size, is the same as the input grid||is the same.||is the same.
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)),input, a three by three grid with many different colors||a 3x3 grid with different colors in each square||a 3x3 grid with five different colors in the squares.
5582e5ca.json,(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)),output," determine which color is used the most in the input grid and make the entire grid that color||determine what color is used the most in the input grid and make the entire output grid that color.||determine which color is used for the majority of the squares in the input grid, then use that color for the entire output grid."
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black orange) false)),grid_size,remains the same.|| is the same as the input
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black orange) false)),input,a 9x9 grid|| a grid containing a couple abstract shapes.
60b61512.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 true true) false) black orange) false)),output,"complete the squares using the color orange.|| keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),grid_size,remains the same.|| is the same as the input
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),input,a 9x9 grid|| a grid containing a couple abstract shapes.
60b61512.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) orange) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),output,"complete the squares using the color orange.|| keep the shapes in the same place, but fill the gaps in the shape with the color orange until they form squares"
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),grid_size, copy the input grid
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),input, black background with green colored blocks
67385a82.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) teal) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) true)),output," any green colored blocks that are more than 2 connected blocks (1x2, 2x1, 2x2, or other shapes) should be changed to light blue."
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) false)),grid_size,same as input||stay the same as the input
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) false)),input,a wild pattern of colors||a complex color pattern
67a3c6ac.json,(lambda (to_min_grid (reflect (grid_to_block $0) false) false)),output,create a right to left mirror image.||create a left/ right mirror image of the input
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false) 3 east true)) true) true)),grid_size,6x6 grid||6 x 6 grid
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false) 3 east true)) true) true)),input,a 3x3 grid||a 3 x 3 grid
67e8384a.json,(lambda (to_min_grid (reflect (remove_black_b (move (reflect (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false) 3 east true)) true) true)),output, copy-paste the pattern in each corner.||the pattern on the bottoms flips parallel to the top||copy-paste the pattern in each corner.||The pattern on the bottoms flips parallel to the top.
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) false)),grid_size,is the same as the input grid size
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) false)),input,many squares of various colors
68b16354.json,(lambda (to_min_grid (reflect (grid_to_block $0) true) false)),output,flip the input grid vertically
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) false)),grid_size,changes to 3 by 6||changes to 3 by 6
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) false)),input,a 3 by 3 grid|| a 3 by 3 grid.
6d0aefbc.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) false) 3 east true)) false)),output,copy the grid and reflect it on the other half.|| copy the grid and reflect on the other half
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black red) false)),grid_size,is the same size
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black red) false)),input,a large section of the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (replace_color (merge_blocks (find_same_color_blocks $0 false true) false) black red) false)),output,fill in the area of the large section with red to make a rectangular section.||Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),grid_size,is the same size
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),input,a large section of the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles $0)) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),output,fill in the area of the large section with red to make a rectangular section.||Background remain the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),grid_size,is the same size
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),input,a large section of the same color
6d75e8bb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) red) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) true)),output,fill in the area of the large section with red to make a rectangular section.||Background remain the same color
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) false)),grid_size,Same as the input grid||the same size|| remains the same as the input grid size.||remains the same as the input grid size
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) false)),input,  A black grid||black grid|| A black grid||a black grid
6f8cd79b.json,(lambda (to_min_grid (filter_block_tiles (fill_color (grid_to_block $0) teal) (lambda (is_exterior $0 true))) false)),output,"You should create light blue border around the black grid.||use light blue color to draw the border of the grid with only one cell as width|| Create a light blue border around the grid.||So, any tiles that are touching the edges are filled in with light blue.||The rest of the tiles remain black.||create a light blue border around the grid.||So, any squares that are touching the edges are filled in with light blue.||The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) true)),grid_size,Same as the input grid||the same size|| remains the same as the input grid size.||remains the same as the input grid size
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) true)),input,  A black grid||black grid|| A black grid||a black grid
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 true))) teal) true)),output,"You should create light blue border around the black grid.||use light blue color to draw the border of the grid with only one cell as width|| Create a light blue border around the grid.||So, any tiles that are touching the edges are filled in with light blue.||The rest of the tiles remain black.||create a light blue border around the grid.||So, any squares that are touching the edges are filled in with light blue.||The rest of the squares inside the light blue border remain black."
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 false))) teal) false)),grid_size,Same as the input grid||the same size|| remains the same as the input grid size.||remains the same as the input grid size
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 false))) teal) false)),input,  A black grid||black grid|| A black grid||a black grid
6f8cd79b.json,(lambda (to_min_grid (fill_color (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 false))) teal) false)),output,"You should create light blue border around the black grid.||use light blue color to draw the border of the grid with only one cell as width|| Create a light blue border around the grid.||So, any tiles that are touching the edges are filled in with light blue.||The rest of the tiles remain black.||create a light blue border around the grid.||So, any squares that are touching the edges are filled in with light blue.||The rest of the squares inside the light blue border remain black."
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 south true) true)),grid_size,is 3x6 vertical grid.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 south true) true)),input,a 3x3 pattern.
6fa7a44f.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) true) 3 south true) true)),output,place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false)),grid_size,is 3x6 vertical grid.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false)),input,a 3x3 pattern.
6fa7a44f.json,(lambda (to_min_grid (remove_black_b (move (reflect (grid_to_block $0) true) 3 south true)) false)),output,place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
6fa7a44f.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 south true)) true)),grid_size,is 3x6 vertical grid.
6fa7a44f.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 south true)) true)),input,a 3x3 pattern.
6fa7a44f.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) true) 3 south true)) true)),output,place the input grid in the top 3x3 space and create a mirror image in the bottom 3x3 space.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) true)),grid_size,"is the size of one of the shapes by itself||is the same size as one of the figures, zooming in||is the same size as one of the figures, zooming in"
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) true)),input,several different shapes on a large grid||several figures on a big grid||several figures on a big grid.
72ca375d.json,(lambda (to_min_grid (singleton_block (filter_blocks (find_same_color_blocks $0 true true) (lambda (is_symmetrical $0 false)))) true)),output,copy one of the shapes by itself and keep the black squares if there are any||copy one of the figures and just that figure||copy one of the figures and just that figure.
88a10436.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles $0)) false) $0))) true true)),grid_size, is the same as the input grid size.|| remains the same as the input grid size.
88a10436.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles $0)) false) $0))) true true)),input, a multi-colored 3x3 shape and a single gray square on a black background.|| multi-colored 3x3 shapes with a gray tile placed randomly
88a10436.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (first_of_sorted_object_list (find_blocks_by_inferred_b $1 true false) (lambda (get_num_tiles $0)) false) $0))) true true)),output,"copy the input.||Then, copy the colorful shape and paste it on top of the gray square, making sure the center of the shape is directly above the square.||copy the input 3x3 multi-colored shape ontop of the gray square, this square comprises the MIDDLE of the 3x3 copy."
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (negate_boolean (has_color (grid_to_block $0) blue))) false)),grid_size,will be 2x2.
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (negate_boolean (has_color (grid_to_block $0) blue))) false)),input,squares of black and another color.
88a62173.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true false) (lambda (get_num_tiles $0)) (negate_boolean (has_color (grid_to_block $0) blue))) false)),output,"replicate one of the patterns in one of the corners.||Bottom right, bottom left, top right, or top left."
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),grid_size,choose the shape with the most red squares and make the grid that size||choose one shape and make the grid that size
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),input,2 colors on a black background||2 colors on black background
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),output,replicate the pattern of the chosen shape.||make the grid the same size as the shape and the two colors are just like in the shape.
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),grid_size,choose the shape with the most red squares and make the grid that size||choose one shape and make the grid that size
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),input,2 colors on a black background||2 colors on black background
8efcae92.json,(lambda (to_min_grid (first_of_sorted_object_list (find_same_color_blocks $0 false true) (lambda (get_num_tiles (remove_color $0 blue))) false) false)),output,replicate the pattern of the chosen shape.||make the grid the same size as the shape and the two colors are just like in the shape.
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) false)),grid_size,9x9 grid|| is a 9x9 grid||is changed to 9x9
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) false)),input,3x3 grid|| a 3x3 grid with colors||a 3x3 grid with three colors
9172f3a0.json,(lambda (to_min_grid (grow (grid_to_block $0) 2) false)),output,"each tile in the input grid is a 3x3 grid pattern on the output.||Keep same color and pattern but increase to a 9x9 grid.||copy the same colors in the same position.||For every single grid in the input, it should be changed to a 3x3 of color each in the output.||use the same colors in the same position."
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) true) grey) true)),grid_size,no change||remains the same.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) true) grey) true)),input,more than one color set|| a couple or several colors that fill the grid.
9565186b.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (find_blocks_by_inferred_b $0 true false) true) grey) true)),output,replace minority colors with gray.||keep the color with the most squares and everything else should be gray.
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))),grid_size,.should be 4x4.
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))),input,.a 4x4 square of blue and black boxes on top of a yellow line.||Below the yellow line is a 4x4 square of red and black boxes.
99b1bc43.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))),output,"compare the squares in the top and bottom 4x4 square.||If they match (both black or both color) make the output square black.||If they do not match, make the output square green."
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),grid_size,should be the same size as the black spots
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),input,can see a pattern with a some black part.
9ecd008a.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (reflect (grid_to_block $0) false)) (lambda (negate_boolean (tile_overlaps_block $0 (remove_black_b (grid_to_block $1)))))) false)),output,fill the black spots with the exact same pattern that need to be filled in the original grid.
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false)),grid_size,is twice as wide and the same height as the original|| is the same height as the input grid but twice as wide
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false)),input,a pattern using colored squares|| a grid with colored squares
a416b8f3.json,(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false)),output,copy the pattern exactly to the new empty section.||There should be two of the same pattern side-by-side.||place the input design all the way on the left half and then duplicate the exact same design and colors on the right half.||The final grid is two of the original grid next to each other.
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) false)),grid_size,is the size of the pattern in the blue grid
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) false)),input,a blue grid with a pattern some place
a740d043.json,(lambda (to_min_grid (remove_color (grid_to_block $0) blue) false)),output,"make the pattern and if there is any more on the sides or any blue, fill in with black."
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) teal red) 1 south false) false)),grid_size, Same as input
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) teal red) 1 south false) false)),input,black background with colored squares
a79310a0.json,(lambda (to_original_grid_overlay (move (replace_color (grid_to_block $0) teal red) 1 south false) false)),output,Move colored square one line down and change to red.
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (grid_to_block $0) 1 south false)) red) false)),grid_size, Same as input
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (grid_to_block $0) 1 south false)) red) false)),input,black background with colored squares
a79310a0.json,(lambda (to_original_grid_overlay (fill_color (remove_black_b (move (grid_to_block $0) 1 south false)) red) false)),output,Move colored square one line down and change to red.
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),grid_size,should be the same as the input
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),input,a pattern and one colored square at the bottom
aabf363d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) (nth_primary_color (grid_to_block $0) 2)) (lambda (negate_boolean (tile_overlaps_block $0 (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) false))))) false)),output,change the pattern to match the one colored square at the bottom and fill in the one square at the bottom to black.
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) true)),grid_size,is is 3x3||is 3x3
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) true)),input,four cubes||four 3x3 squares with blue and light blue pixels
ae4f1146.json,(lambda (to_min_grid (first_of_sorted_object_list (find_blocks_by_color $0 blue true false) (lambda (get_num_tiles $0)) false) true)),output,mirror the square with the most dark blocks.||copy the 3x3 square from the input grid that has the most blue pixels.
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) true)),grid_size, is the same as the input grid.||no change
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) true)),input, a number of different size shapes.||large shapes with smaller shapes
aedd82e4.json,(lambda (to_original_grid_overlay (fill_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false) blue) true)),output,copy the input grid.||Any shapes which only contain one single square should be colored blue.||color smaller shapes dark blue.
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false)),grid_size,the same size as the input|| is the same as the input size
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false)),input,"two different color squares||two colors, one of which is orange."
b1948b0a.json,(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false)),output,replace all the purple squares with red.||turn the not-orange color into light red.
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) true)),grid_size,is the same as the input||is the same as the input
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) true)),input, a complex pattern of colors with some distinct yellow rectangles||a complex pattern of colored squares that contains at least 2 distinct yellow rectangles
b8825c91.json,(lambda (to_min_grid (reflect (remove_color (grid_to_block $0) yellow) false) true)),output,remove the yellow rectangles and replace the color to match the existing pattern.||remove the yellow rectangles and replace the all of the yellow squares with the appropriate color in order to create a pattern that is both horizontally and vertically symmetrical.
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) red) (lambda (is_interior $0 true))) true)),grid_size, stay the same.|| will be the same size as the input grid (10x10).
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) red) (lambda (is_interior $0 true))) true)),input, a square and rectangular.|| two gray rectangles.
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_blocks_by_inferred_b $0 false false) false) red) (lambda (is_interior $0 true))) true)),output,"fill the inside of both shapes with red leaving a border the same color as original.||color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) red) (lambda (is_interior $0 true))) true)),grid_size, stay the same.|| will be the same size as the input grid (10x10).
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) red) (lambda (is_interior $0 true))) true)),input, a square and rectangular.|| two gray rectangles.
bb43febb.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (remove_black_b (grid_to_block $0)) red) (lambda (is_interior $0 true))) true)),output,"fill the inside of both shapes with red leaving a border the same color as original.||color in the center of each gray square red, but make sure you leave a 1 square gray border around it (so if it's a 5x5 gray square, you would color a red 3x3 square inside it, leaving a gray border around the red square)."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) false)),grid_size,"will be double the input size, so if, for example, the input is 4x4 the output will be 8x8."
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) false)),input,blocks of various colors
c59eb873.json,(lambda (to_min_grid (grow (grid_to_block $0) 1) false)),output,"divide each block  into a 2x2 square in the same color as the original block.||So, each block from the original input grid will become a 2x2 block of 4 squares of the same color as the original block."
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false)),grid_size,is the same as the input grid size||same as  input
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false)),input,blue and yellow colors||blue grid with yellow grid
c8f0f002.json,(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false)),output,change the yellow grids into grey one.||replace yellow grid with grey.
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) true)),grid_size,"is the same as the small square inside the input grid.|| will be the number of squares within the different color border, including the colored border"
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) true)),input,a a small square inside the input grid with border.||.one section that has a different color border
c909285e.json,(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_same_color_blocks $0 true false) (lambda (is_symmetrical $0 false))) (lambda (get_num_tiles $0)) false) true)),output,copy the entire small square grid without change in  the pattern or the colors along with the border.||count the number of squares in the colored border and resize the output to that number.||Then you color all the blocks to match the input.
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) 3 east true) true)),grid_size," doubles horizontally, so instead of 3x6 it's now 6x3.|| has twice as many rows, but the same height||two times the row, but same height!"
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) 3 east true) true)),input, a simple 3x3 pattern of orange and black dots.||an orange shape on a black background||the orange grid only
c9e6f938.json,(lambda (to_min_grid (move (reflect (grid_to_block $0) false) 3 east true) true)),output,"copy the original pattern to the left half of the grid, then mirror it on the right, like an inkblot.||create a left-right mirror of pattern of the orange shape.||make the pattern mirror as left-right with the same height and twice the row."
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) false) 3 east true)) false)),grid_size," doubles horizontally, so instead of 3x6 it's now 6x3.|| has twice as many rows, but the same height||two times the row, but same height!"
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) false) 3 east true)) false)),input, a simple 3x3 pattern of orange and black dots.||an orange shape on a black background||the orange grid only
c9e6f938.json,(lambda (to_min_grid (box_block (move (reflect (grid_to_block $0) false) 3 east true)) false)),output,"copy the original pattern to the left half of the grid, then mirror it on the right, like an inkblot.||create a left-right mirror of pattern of the orange shape.||make the pattern mirror as left-right with the same height and twice the row."
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) blue true) blue))) true false)),grid_size,the same as input grid||should stay the same|| is the same for input and output
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) blue true) blue))) true false)),input,a black background with gray squares||a black background with some squares in gray||a black background with some squares in gray
ce22a75a.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (fill_color (wrap_block (remove_black_b (grid_to_block $1)) blue true) blue))) true false)),output,change every gray square and the 9 squares around it into blue.||change every gray square and the 9 squares that go all around it into blue.||change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) blue true) blue) true)),grid_size,the same as input grid||should stay the same|| is the same for input and output
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) blue true) blue) true)),input,a black background with gray squares||a black background with some squares in gray||a black background with some squares in gray
ce22a75a.json,(lambda (to_original_grid_overlay (fill_color (wrap_block (remove_black_b (grid_to_block $0)) blue true) blue) true)),output,change every gray square and the 9 squares around it into blue.||change every gray square and the 9 squares that go all around it into blue.||change the gray blocks to blue and the squares that go around it to turn it into a blue block of 9.
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor))))),grid_size, must be 4x4
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor))))),input,a long grid with several colors.
ce4f8723.json,(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor))))),output,"consider the long input as two sections as 4x4 grids, consider that the two sections as one.||then the leave that black spaces as black then point the colored blocks as green."
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) false false)),grid_size,is the same
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) false false)),input,a pattern with different colored squares
d037b0a7.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until_edge $0 south))) false false)),output,wherever you see a color other than black make squares below that color the same color down to the border.
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0)) true)),grid_size,is the same as the input.|| is the same as the input.
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0)) true)),input,a square grid of colored squares.|| a random collection of colored squares.
d23f8c26.json,(lambda (to_min_grid (fill_color (merge_blocks (splitblocks_to_blocks (split_grid $0 false)) true) (nth_primary_color (grid_to_block $0) 0)) true)),output,"keep the vertical middle line of squares the same, and color the rest of the squares black.||turn everything black, but keep the middle vertical line of colored squares."
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles $0)) false) false))) true true)),grid_size, is the same as the input grid.
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles $0)) false) false))) true true)),input, a 2x2 green square and a number of other smaller colored squares.
d43fd935.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles $0)) false) false))) true true)),output,"copy the input grid.||Then, connect the 2x2 green square to any and all other colored squares which you can reach with a straight line.||Use the color of the square to which you are connecting the 2x2 green square.||Fill in all of the black squares between that square and the 2x2 green square.||Leave the rest of the grid - including any colored square you can't reach with a straight line - as they are."
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (is_interior $0 true))) false)),grid_size,is the same as the input
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (is_interior $0 true))) false)),input,a number of boxes with holes in them
d5d6de2d.json,(lambda (to_original_grid_overlay (filter_block_tiles (fill_color (merge_blocks (find_same_color_blocks $0 true true) false) green) (lambda (is_interior $0 true))) false)),output,"fill in the holes of the boxes with green, then black out the outlines of the boxes."
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) false)),grid_size, the size of one single block||is the size of one block from the input grid.
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) false)),input,"green and light blue blocks, with one green square with a light blue in the center of it.||various colored structures scattered around the grid with one structure a square with a different colored center block."
d9fac9be.json,(lambda (to_min_grid (filter_block_tiles (remove_black_b (grid_to_block $0)) (lambda (is_interior $0 true))) false)),output,zoom into the light blue center block.||zoom into the different colored center block from the input grid and make it the only colored block.
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor))))),grid_size, is 3x3.
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor))))),input, a 6x3 grid with a yellow pattern on the left and a green pattern on the right.
dae9d2b5.json,(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor))))),output," copy and paste the left-side of the input (the yellow side) onto the output grid.||Then, draw the green pattern on the output grid on top of the yellow (do not copy and paste because the black will overwrite the yellow).||Your output grid should now have green and yellow on a black background.||Then, recolor each green and yellow square pink, so your output is only pink and black."
ded97339.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (extend_until_touches_block $1 $0 false))) false) false))) true true)),grid_size,is the same size as the input grid
ded97339.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (extend_until_touches_block $1 $0 false))) false) false))) true true)),input,magenta boxes on a black background
ded97339.json,(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_until_touches_block $0 (first_of_sorted_object_list (find_same_color_blocks $1 true true) (lambda (get_num_tiles (extend_until_touches_block $1 $0 false))) false) false))) true true)),output,connect the magenta boxes that are directly vertical and horizontal to each other.
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)),grid_size,same as input||same as input
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)),input,a black grid with a color pattern||color grid
f25ffba3.json,(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)),output,reflect the pattern upside down like it was up against a mirror.||reflect down side to top.
