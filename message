{"tasks": [{"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 2, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "0,14": 0, "0,15": 0, "0,16": 0, "0,17": 0, "0,18": 0, "0,19": 0, "0,20": 0, "0,21": 0, "0,22": 0, "0,23": 0, "0,24": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "1,14": 0, "1,15": 0, "1,16": 0, "1,17": 0, "1,18": 0, "1,19": 0, "1,20": 0, "1,21": 0, "1,22": 0, "1,23": 0, "1,24": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "2,14": 0, "2,15": 0, "2,16": 0, "2,17": 0, "2,18": 0, "2,19": 0, "2,20": 0, "2,21": 0, "2,22": 0, "2,23": 0, "2,24": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "3,13": 0, "3,14": 0, "3,15": 0, "3,16": 0, "3,17": 0, "3,18": 0, "3,19": 0, "3,20": 0, "3,21": 0, "3,22": 0, "3,23": 0, "3,24": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "4,14": 0, "4,15": 0, "4,16": 0, "4,17": 0, "4,18": 0, "4,19": 0, "4,20": 0, "4,21": 0, "4,22": 0, "4,23": 0, "4,24": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "5,14": 0, "5,15": 0, "5,16": 0, "5,17": 0, "5,18": 0, "5,19": 0, "5,20": 0, "5,21": 0, "5,22": 0, "5,23": 0, "5,24": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "6,14": 0, "6,15": 0, "6,16": 0, "6,17": 0, "6,18": 0, "6,19": 0, "6,20": 0, "6,21": 0, "6,22": 0, "6,23": 0, "6,24": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "7,14": 0, "7,15": 0, "7,16": 0, "7,17": 0, "7,18": 0, "7,19": 0, "7,20": 0, "7,21": 0, "7,22": 0, "7,23": 0, "7,24": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "8,13": 0, "8,14": 0, "8,15": 0, "8,16": 0, "8,17": 0, "8,18": 0, "8,19": 0, "8,20": 0, "8,21": 0, "8,22": 0, "8,23": 0, "8,24": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 8, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "9,12": 0, "9,13": 0, "9,14": 0, "9,15": 0, "9,16": 0, "9,17": 0, "9,18": 0, "9,19": 0, "9,20": 0, "9,21": 0, "9,22": 0, "9,23": 0, "9,24": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 2, "0,6": 0, "0,7": 8, "0,8": 0, "0,9": 2, "0,10": 0, "0,11": 8, "0,12": 0, "0,13": 2, "0,14": 0, "0,15": 8, "0,16": 0, "0,17": 2, "0,18": 0, "0,19": 8, "0,20": 0, "0,21": 2, "0,22": 0, "0,23": 8, "0,24": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 2, "1,6": 0, "1,7": 8, "1,8": 0, "1,9": 2, "1,10": 0, "1,11": 8, "1,12": 0, "1,13": 2, "1,14": 0, "1,15": 8, "1,16": 0, "1,17": 2, "1,18": 0, "1,19": 8, "1,20": 0, "1,21": 2, "1,22": 0, "1,23": 8, "1,24": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 2, "2,6": 0, "2,7": 8, "2,8": 0, "2,9": 2, "2,10": 0, "2,11": 8, "2,12": 0, "2,13": 2, "2,14": 0, "2,15": 8, "2,16": 0, "2,17": 2, "2,18": 0, "2,19": 8, "2,20": 0, "2,21": 2, "2,22": 0, "2,23": 8, "2,24": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 2, "3,6": 0, "3,7": 8, "3,8": 0, "3,9": 2, "3,10": 0, "3,11": 8, "3,12": 0, "3,13": 2, "3,14": 0, "3,15": 8, "3,16": 0, "3,17": 2, "3,18": 0, "3,19": 8, "3,20": 0, "3,21": 2, "3,22": 0, "3,23": 8, "3,24": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 2, "4,6": 0, "4,7": 8, "4,8": 0, "4,9": 2, "4,10": 0, "4,11": 8, "4,12": 0, "4,13": 2, "4,14": 0, "4,15": 8, "4,16": 0, "4,17": 2, "4,18": 0, "4,19": 8, "4,20": 0, "4,21": 2, "4,22": 0, "4,23": 8, "4,24": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 2, "5,6": 0, "5,7": 8, "5,8": 0, "5,9": 2, "5,10": 0, "5,11": 8, "5,12": 0, "5,13": 2, "5,14": 0, "5,15": 8, "5,16": 0, "5,17": 2, "5,18": 0, "5,19": 8, "5,20": 0, "5,21": 2, "5,22": 0, "5,23": 8, "5,24": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 2, "6,6": 0, "6,7": 8, "6,8": 0, "6,9": 2, "6,10": 0, "6,11": 8, "6,12": 0, "6,13": 2, "6,14": 0, "6,15": 8, "6,16": 0, "6,17": 2, "6,18": 0, "6,19": 8, "6,20": 0, "6,21": 2, "6,22": 0, "6,23": 8, "6,24": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 2, "7,6": 0, "7,7": 8, "7,8": 0, "7,9": 2, "7,10": 0, "7,11": 8, "7,12": 0, "7,13": 2, "7,14": 0, "7,15": 8, "7,16": 0, "7,17": 2, "7,18": 0, "7,19": 8, "7,20": 0, "7,21": 2, "7,22": 0, "7,23": 8, "7,24": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 2, "8,6": 0, "8,7": 8, "8,8": 0, "8,9": 2, "8,10": 0, "8,11": 8, "8,12": 0, "8,13": 2, "8,14": 0, "8,15": 8, "8,16": 0, "8,17": 2, "8,18": 0, "8,19": 8, "8,20": 0, "8,21": 2, "8,22": 0, "8,23": 8, "8,24": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 2, "9,6": 0, "9,7": 8, "9,8": 0, "9,9": 2, "9,10": 0, "9,11": 8, "9,12": 0, "9,13": 2, "9,14": 0, "9,15": 8, "9,16": 0, "9,17": 2, "9,18": 0, "9,19": 8, "9,20": 0, "9,21": 2, "9,22": 0, "9,23": 8, "9,24": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 1, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "0,14": 0, "0,15": 0, "0,16": 0, "0,17": 0, "0,18": 0, "0,19": 0, "0,20": 0, "0,21": 0, "0,22": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "1,14": 0, "1,15": 0, "1,16": 0, "1,17": 0, "1,18": 0, "1,19": 0, "1,20": 0, "1,21": 0, "1,22": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "2,14": 0, "2,15": 0, "2,16": 0, "2,17": 0, "2,18": 0, "2,19": 0, "2,20": 0, "2,21": 0, "2,22": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "3,13": 0, "3,14": 0, "3,15": 0, "3,16": 0, "3,17": 0, "3,18": 0, "3,19": 0, "3,20": 0, "3,21": 0, "3,22": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "4,14": 0, "4,15": 0, "4,16": 0, "4,17": 0, "4,18": 0, "4,19": 0, "4,20": 0, "4,21": 0, "4,22": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "5,14": 0, "5,15": 0, "5,16": 0, "5,17": 0, "5,18": 0, "5,19": 0, "5,20": 0, "5,21": 0, "5,22": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 3, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "6,14": 0, "6,15": 0, "6,16": 0, "6,17": 0, "6,18": 0, "6,19": 0, "6,20": 0, "6,21": 0, "6,22": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 1, "0,6": 0, "0,7": 0, "0,8": 3, "0,9": 0, "0,10": 0, "0,11": 1, "0,12": 0, "0,13": 0, "0,14": 3, "0,15": 0, "0,16": 0, "0,17": 1, "0,18": 0, "0,19": 0, "0,20": 3, "0,21": 0, "0,22": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 1, "1,6": 0, "1,7": 0, "1,8": 3, "1,9": 0, "1,10": 0, "1,11": 1, "1,12": 0, "1,13": 0, "1,14": 3, "1,15": 0, "1,16": 0, "1,17": 1, "1,18": 0, "1,19": 0, "1,20": 3, "1,21": 0, "1,22": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 1, "2,6": 0, "2,7": 0, "2,8": 3, "2,9": 0, "2,10": 0, "2,11": 1, "2,12": 0, "2,13": 0, "2,14": 3, "2,15": 0, "2,16": 0, "2,17": 1, "2,18": 0, "2,19": 0, "2,20": 3, "2,21": 0, "2,22": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 1, "3,6": 0, "3,7": 0, "3,8": 3, "3,9": 0, "3,10": 0, "3,11": 1, "3,12": 0, "3,13": 0, "3,14": 3, "3,15": 0, "3,16": 0, "3,17": 1, "3,18": 0, "3,19": 0, "3,20": 3, "3,21": 0, "3,22": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 1, "4,6": 0, "4,7": 0, "4,8": 3, "4,9": 0, "4,10": 0, "4,11": 1, "4,12": 0, "4,13": 0, "4,14": 3, "4,15": 0, "4,16": 0, "4,17": 1, "4,18": 0, "4,19": 0, "4,20": 3, "4,21": 0, "4,22": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 1, "5,6": 0, "5,7": 0, "5,8": 3, "5,9": 0, "5,10": 0, "5,11": 1, "5,12": 0, "5,13": 0, "5,14": 3, "5,15": 0, "5,16": 0, "5,17": 1, "5,18": 0, "5,19": 0, "5,20": 3, "5,21": 0, "5,22": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 1, "6,6": 0, "6,7": 0, "6,8": 3, "6,9": 0, "6,10": 0, "6,11": 1, "6,12": 0, "6,13": 0, "6,14": 3, "6,15": 0, "6,16": 0, "6,17": 1, "6,18": 0, "6,19": 0, "6,20": 3, "6,21": 0, "6,22": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "5,0": 2, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 3, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "13,8": 0, "14,0": 0, "14,1": 0, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 0, "14,6": 0, "14,7": 0, "14,8": 0, "15,0": 0, "15,1": 0, "15,2": 0, "15,3": 0, "15,4": 0, "15,5": 0, "15,6": 0, "15,7": 0, "15,8": 0, "16,0": 0, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 0, "16,5": 0, "16,6": 0, "16,7": 0, "16,8": 0, "17,0": 0, "17,1": 0, "17,2": 0, "17,3": 0, "17,4": 0, "17,5": 0, "17,6": 0, "17,7": 0, "17,8": 0, "18,0": 0, "18,1": 0, "18,2": 0, "18,3": 0, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 0, "18,8": 0, "19,0": 0, "19,1": 0, "19,2": 0, "19,3": 0, "19,4": 0, "19,5": 0, "19,6": 0, "19,7": 0, "19,8": 0, "20,0": 0, "20,1": 0, "20,2": 0, "20,3": 0, "20,4": 0, "20,5": 0, "20,6": 0, "20,7": 0, "20,8": 0, "21,0": 0, "21,1": 0, "21,2": 0, "21,3": 0, "21,4": 0, "21,5": 0, "21,6": 0, "21,7": 0, "21,8": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "5,0": 2, "5,1": 2, "5,2": 2, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 2, "5,7": 2, "5,8": 2, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "7,0": 3, "7,1": 3, "7,2": 3, "7,3": 3, "7,4": 3, "7,5": 3, "7,6": 3, "7,7": 3, "7,8": 3, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "9,0": 2, "9,1": 2, "9,2": 2, "9,3": 2, "9,4": 2, "9,5": 2, "9,6": 2, "9,7": 2, "9,8": 2, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "11,0": 3, "11,1": 3, "11,2": 3, "11,3": 3, "11,4": 3, "11,5": 3, "11,6": 3, "11,7": 3, "11,8": 3, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "13,0": 2, "13,1": 2, "13,2": 2, "13,3": 2, "13,4": 2, "13,5": 2, "13,6": 2, "13,7": 2, "13,8": 2, "14,0": 0, "14,1": 0, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 0, "14,6": 0, "14,7": 0, "14,8": 0, "15,0": 3, "15,1": 3, "15,2": 3, "15,3": 3, "15,4": 3, "15,5": 3, "15,6": 3, "15,7": 3, "15,8": 3, "16,0": 0, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 0, "16,5": 0, "16,6": 0, "16,7": 0, "16,8": 0, "17,0": 2, "17,1": 2, "17,2": 2, "17,3": 2, "17,4": 2, "17,5": 2, "17,6": 2, "17,7": 2, "17,8": 2, "18,0": 0, "18,1": 0, "18,2": 0, "18,3": 0, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 0, "18,8": 0, "19,0": 3, "19,1": 3, "19,2": 3, "19,3": 3, "19,4": 3, "19,5": 3, "19,6": 3, "19,7": 3, "19,8": 3, "20,0": 0, "20,1": 0, "20,2": 0, "20,3": 0, "20,4": 0, "20,5": 0, "20,6": 0, "20,7": 0, "20,8": 0, "21,0": 2, "21,1": 2, "21,2": 2, "21,3": 2, "21,4": 2, "21,5": 2, "21,6": 2, "21,7": 2, "21,8": 2}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "7,0": 4, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "11,0": 1, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "14,0": 0, "14,1": 0, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 0, "14,6": 0, "14,7": 0, "15,0": 0, "15,1": 0, "15,2": 0, "15,3": 0, "15,4": 0, "15,5": 0, "15,6": 0, "15,7": 0, "16,0": 0, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 0, "16,5": 0, "16,6": 0, "16,7": 0, "17,0": 0, "17,1": 0, "17,2": 0, "17,3": 0, "17,4": 0, "17,5": 0, "17,6": 0, "17,7": 0, "18,0": 0, "18,1": 0, "18,2": 0, "18,3": 0, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 0, "19,0": 0, "19,1": 0, "19,2": 0, "19,3": 0, "19,4": 0, "19,5": 0, "19,6": 0, "19,7": 0, "20,0": 0, "20,1": 0, "20,2": 0, "20,3": 0, "20,4": 0, "20,5": 0, "20,6": 0, "20,7": 0, "21,0": 0, "21,1": 0, "21,2": 0, "21,3": 0, "21,4": 0, "21,5": 0, "21,6": 0, "21,7": 0, "22,0": 0, "22,1": 0, "22,2": 0, "22,3": 0, "22,4": 0, "22,5": 0, "22,6": 0, "22,7": 0, "23,0": 0, "23,1": 0, "23,2": 0, "23,3": 0, "23,4": 0, "23,5": 0, "23,6": 0, "23,7": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "7,0": 4, "7,1": 4, "7,2": 4, "7,3": 4, "7,4": 4, "7,5": 4, "7,6": 4, "7,7": 4, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "11,0": 1, "11,1": 1, "11,2": 1, "11,3": 1, "11,4": 1, "11,5": 1, "11,6": 1, "11,7": 1, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "14,0": 0, "14,1": 0, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 0, "14,6": 0, "14,7": 0, "15,0": 4, "15,1": 4, "15,2": 4, "15,3": 4, "15,4": 4, "15,5": 4, "15,6": 4, "15,7": 4, "16,0": 0, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 0, "16,5": 0, "16,6": 0, "16,7": 0, "17,0": 0, "17,1": 0, "17,2": 0, "17,3": 0, "17,4": 0, "17,5": 0, "17,6": 0, "17,7": 0, "18,0": 0, "18,1": 0, "18,2": 0, "18,3": 0, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 0, "19,0": 1, "19,1": 1, "19,2": 1, "19,3": 1, "19,4": 1, "19,5": 1, "19,6": 1, "19,7": 1, "20,0": 0, "20,1": 0, "20,2": 0, "20,3": 0, "20,4": 0, "20,5": 0, "20,6": 0, "20,7": 0, "21,0": 0, "21,1": 0, "21,2": 0, "21,3": 0, "21,4": 0, "21,5": 0, "21,6": 0, "21,7": 0, "22,0": 0, "22,1": 0, "22,2": 0, "22,3": 0, "22,4": 0, "22,5": 0, "22,6": 0, "22,7": 0, "23,0": 4, "23,1": 4, "23,2": 4, "23,3": 4, "23,4": 4, "23,5": 4, "23,6": 4, "23,7": 4}}}], "name": "0a938d79.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (remove_black_b (box_block (grid_to_block $0))) true))", "(lambda (to_original_grid_overlay (remove_black_b (box_block (grid_to_block $0))) false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (grid_to_block $0)) north_west (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (grid_to_block $0)) north_west (lambda true)) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (is_tile (grid_to_block $0))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (is_tile (grid_to_block $0))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean (negate_boolean (negate_boolean true))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean (negate_boolean (negate_boolean true))) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean true))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) true))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) true))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 6) true) true))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 6) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean false)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 6) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 6) true) (negate_boolean false)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (is_tile (grid_to_block $0))) (touches_any_boundary (grid_to_block $0))))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south))))) false) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south))))) false) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_black_b $0 false false))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_black_b $0 false false))) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 7) true) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south_east))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south_east))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) (get_block_center (tile_to_block $0))))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) (get_block_center (tile_to_block $0))))) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) $0))) true) (negate_boolean (negate_boolean false))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (negate_boolean (negate_boolean (negate_boolean (negate_boolean false))))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_inferred_b $0 false false))) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_inferred_b $0 false false))) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) north_east))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) north_east))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) north_east))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) north_east))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) south))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) south))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) west))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) west))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south_west))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) south_west))))) true) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 3) true) true))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 3) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) north))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 west (lambda true)) north))))) true) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) north))))) true) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (move_towards_until $0 south_east (lambda false)) north))))) true) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 6) true) true))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 6) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) (get_block_center (grid_to_block $1))))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean true) true)) (get_block_center (grid_to_block $1))))) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean (negate_boolean true))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)))))) 4) true) (negate_boolean (negate_boolean false))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) (negate_boolean false)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) (is_tile (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean true) (is_tile (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (is_tile (singleton_block (find_blocks_by_inferred_b $0 false true)))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (is_tile (singleton_block (find_blocks_by_inferred_b $0 false false)))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_black_b $0 false false))) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (is_tile (singleton_block (find_blocks_by_black_b $0 false false))) (negate_boolean false)))", "(lambda (to_min_grid (filter_block_tiles (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true)) true) (lambda true)) true))", "(lambda (to_min_grid (filter_block_tiles (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true)) true) (lambda true)) false))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 6) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (tile_to_block (get_block_center (box_block (box_block (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) true))))) 6) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) true)) (block_to_tile (tile_to_block $0))))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) true)) (block_to_tile (tile_to_block $0))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) (is_tile (tile_to_block $0)))) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) (is_tile (tile_to_block $0)))) $0))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (filter_blocks (find_blocks_by_black_b $1 false (negate_boolean true)) (lambda true))) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (filter_blocks (find_blocks_by_black_b $1 false (negate_boolean true)) (lambda true))) $0))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (find_blocks_by_inferred_b $0 (negate_boolean (is_rectangle (reflect (wrap_block (remove_black_b (grid_to_block $0)) yellow (negate_boolean true)) true) true)) false) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (find_blocks_by_inferred_b $0 (negate_boolean (is_rectangle (reflect (wrap_block (remove_black_b (grid_to_block $0)) yellow (negate_boolean true)) true) true)) false) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))) (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) (negate_boolean (negate_boolean true)))) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean true)) (negate_boolean (negate_boolean true)))) $0))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (find_blocks_by_inferred_b $0 (negate_boolean (is_rectangle (reflect (wrap_block (remove_black_b (grid_to_block $0)) pink false) true) (negate_boolean true))) false) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (find_blocks_by_inferred_b $0 (negate_boolean (is_rectangle (reflect (wrap_block (remove_black_b (grid_to_block $0)) pink false) true) (negate_boolean true))) false) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean true))) $0))) false) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) (negate_boolean true))) $0))) false) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true)))) true)) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true)))) true)) $0))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (filter_blocks (find_blocks_by_black_b $1 (negate_boolean true) false) (lambda true))) $0))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (center_block_on_tile (singleton_block (filter_blocks (find_blocks_by_black_b $1 (negate_boolean true) false) (lambda true))) $0))) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_west)))) (is_rectangle (duplicate (grid_to_block $0) north 5) true) true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_west)))) (is_rectangle (duplicate (grid_to_block $0) north 5) true) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (is_tile (singleton_block (find_same_color_blocks $0 false true)))))", "(lambda (blocks_to_min_grid (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_touches_block $0 (tile_to_block $0) south_east)))) (negate_boolean true) (is_tile (singleton_block (find_same_color_blocks $0 false false)))))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "1,0": 2, "1,1": 2, "1,2": 2, "2,0": 3, "2,1": 3, "2,2": 3, "3,0": 0, "3,1": 0, "3,2": 0, "4,0": 0, "4,1": 0, "4,2": 0, "5,0": 0, "5,1": 0, "5,2": 0, "6,0": 0, "6,1": 0, "6,2": 0, "7,0": 0, "7,1": 0, "7,2": 0, "8,0": 0, "8,1": 0, "8,2": 0, "9,0": 0, "9,1": 0, "9,2": 0}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "1,0": 2, "1,1": 2, "1,2": 2, "2,0": 3, "2,1": 3, "2,2": 3, "3,0": 0, "3,1": 0, "3,2": 0, "4,0": 0, "4,1": 0, "4,2": 0, "5,0": 0, "5,1": 0, "5,2": 0, "6,0": 0, "6,1": 0, "6,2": 0, "7,0": 3, "7,1": 3, "7,2": 3, "8,0": 2, "8,1": 2, "8,2": 2, "9,0": 2, "9,1": 2, "9,2": 2}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "0,3": 2, "0,4": 2, "1,0": 8, "1,1": 8, "1,2": 8, "1,3": 8, "1,4": 8, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "0,3": 2, "0,4": 2, "1,0": 8, "1,1": 8, "1,2": 8, "1,3": 8, "1,4": 8, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "8,0": 8, "8,1": 8, "8,2": 8, "8,3": 8, "8,4": 8, "9,0": 2, "9,1": 2, "9,2": 2, "9,3": 2, "9,4": 2}}}], "name": "496994bd.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (grow (grid_to_block $0) 7) true))", "(lambda (to_min_grid (grow (grid_to_block $0) 7) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_any_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))))))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_any_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean true)) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean true)) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean false)) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean false)) false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) true true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) true false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean true))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean true))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda (negate_boolean (negate_boolean true)))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda (negate_boolean (negate_boolean true)))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean true))) false) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean true))) false) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean true)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) (negate_boolean true)) (negate_boolean false)))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) true true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) true false))", "(lambda (blocks_to_original_grid (map_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (duplicate (fill_color (grid_to_block $1) red) north 3))) (lambda $0)) false true))", "(lambda (blocks_to_original_grid (map_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (duplicate (fill_color (grid_to_block $1) red) north 3))) (lambda $0)) false false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) false true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) false false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) false true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) false false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) false true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) false false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) false true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) false false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) invisible)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) black)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) blue)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) red)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) green)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) yellow)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) grey)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) pink)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) orange)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) teal)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) maroon)))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) true true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) true false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda false))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda false))) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) true true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) true false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) true true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) true false))", "(lambda (blocks_to_original_grid (map_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (duplicate (fill_color (grid_to_block $1) red) north 3))) (lambda $0)) true true))", "(lambda (blocks_to_original_grid (map_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (duplicate (fill_color (grid_to_block $1) red) north 3))) (lambda $0)) true false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) north (lambda true)) (lambda true)))) false true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) north (lambda true)) (lambda true)))) false false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) false true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) false false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) north (lambda true)) (lambda true)))) true true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) north (lambda true)) (lambda true)))) true false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda false))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda false))) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (grid_to_block $1)))) true))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (grid_to_block $1)))) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) invisible)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) black)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) blue)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) red)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) green)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) yellow)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) grey)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) pink)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) orange)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) teal)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (has_color (grid_to_block $0) maroon)))", "(lambda (to_min_grid (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (is_exterior (get_block_center (singleton_block (find_blocks_by_black_b $1 false false))) false))))) 2) true))", "(lambda (to_min_grid (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (is_exterior (get_block_center (singleton_block (find_blocks_by_black_b $1 false false))) false))))) 2) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_any_boundary (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $1) (lambda true)) (lambda true)))))))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_any_boundary (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $1) (lambda true)) (lambda true)))))))) false))", "(lambda (to_min_grid (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (is_exterior (get_block_center (singleton_block (find_blocks_by_black_b $1 false false))) false))))) 6) true))", "(lambda (to_min_grid (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (is_exterior (get_block_center (singleton_block (find_blocks_by_black_b $1 false false))) false))))) 6) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) (negate_boolean false) true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) (negate_boolean false) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda (negate_boolean (negate_boolean (negate_boolean true))))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda (negate_boolean (negate_boolean (negate_boolean true))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean (negate_boolean true)))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean true))) (lambda true)) (lambda (negate_boolean (negate_boolean true)))) true) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) invisible)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) black)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) blue)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) red)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) green)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) yellow)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) grey)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) pink)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) orange)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) teal)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) (lambda true))) (has_color (merge_blocks (find_blocks_by_black_b $0 false false) true) maroon)))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_east) true) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) east (lambda true)) (lambda true)))) (negate_boolean true) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (negate_boolean true)))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (negate_boolean true)))) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) (negate_boolean (is_tile (grid_to_block $0)))))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) false) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) south_west) true) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (filter_block_tiles (move_towards_until (block_to_tile (grid_to_block $1)) south_east (lambda true)) (lambda true)))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (negate_boolean true)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda (negate_boolean true)))) false))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) north) (negate_boolean true)) true true))", "(lambda (blocks_to_original_grid (find_same_color_blocks $0 (tile_touches_block (block_to_tile (extend_towards_until (get_block_center (grid_to_block $0)) south (lambda true))) (grid_to_block $0) north) (negate_boolean true)) true false))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 1, "0,1": 2, "1,0": 3, "1,1": 8}}], "output": {"grid": {"0,0": 0, "0,1": 1, "0,2": 2, "0,3": 0, "1,0": 1, "1,1": 1, "1,2": 2, "1,3": 2, "2,0": 3, "2,1": 3, "2,2": 8, "2,3": 8, "3,0": 0, "3,1": 3, "3,2": 8, "3,3": 0}}}, {"inputs": [{"grid": {"0,0": 1, "0,1": 8, "0,2": 4, "1,0": 8, "1,1": 3, "1,2": 8}}], "output": {"grid": {"0,0": 0, "0,1": 1, "0,2": 8, "0,3": 4, "0,4": 0, "1,0": 1, "1,1": 1, "1,2": 8, "1,3": 4, "1,4": 4, "2,0": 8, "2,1": 8, "2,2": 3, "2,3": 8, "2,4": 8, "3,0": 0, "3,1": 8, "3,2": 3, "3,3": 8, "3,4": 0}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 1, "0,2": 4, "1,0": 8, "1,1": 0, "1,2": 2, "2,0": 3, "2,1": 2, "2,2": 8}}], "output": {"grid": {"0,0": 0, "0,1": 2, "0,2": 1, "0,3": 4, "0,4": 0, "1,0": 2, "1,1": 2, "1,2": 1, "1,3": 4, "1,4": 4, "2,0": 8, "2,1": 8, "2,2": 0, "2,3": 2, "2,4": 2, "3,0": 3, "3,1": 3, "3,2": 2, "3,3": 8, "3,4": 8, "4,0": 0, "4,1": 3, "4,2": 2, "4,3": 8, "4,4": 0}}}], "name": "49d1d64f.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grid_to_block $1))) false true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grid_to_block $1))) false false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grid_to_block $1))) false (negate_boolean true)))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grid_to_block $1))) false (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda true)))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda true)))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda true)))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda true)))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda true)))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda true)))) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda (is_interior $0 true))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda (is_interior $0 true))))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 true))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 true))))) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north_east (lambda false)) true))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north_east (lambda false)) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda (tile_overlaps_block $0 (tile_to_block $0)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda (tile_overlaps_block $0 (tile_to_block $0)))))) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north (lambda true)) true))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north (lambda true)) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north_east (lambda true)) true))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) north_east (lambda true)) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) true))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda (tile_overlaps_block $0 (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) north_east (lambda (tile_overlaps_block $0 (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) black)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) black)))))) false))", "(lambda (to_min_grid (singleton_block (find_blocks_by_color $0 (nth_primary_color (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) (negate_boolean true)) 0) (negate_boolean true) false)) true))", "(lambda (to_min_grid (singleton_block (find_blocks_by_color $0 (nth_primary_color (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) (negate_boolean true)) 0) (negate_boolean true) false)) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) pink)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) pink)))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) true) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) grey)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) grey)))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 north_east (lambda true)) 6))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 north_east (lambda true)) 6))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 north_east (lambda true)) 7))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 north_east (lambda true)) 7))) true) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) red)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) red)))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 east (lambda true)) 6))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 east (lambda true)) 6))) true) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) orange)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) orange)))))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) green)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) green)))))) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 south (lambda true)) 6))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 south (lambda true)) 6))) true) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) green)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) yellow)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) teal)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) maroon)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) invisible)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) invisible)))))) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) maroon)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) maroon)))))) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (negate_boolean false)))))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (negate_boolean false)))))))) false false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) blue)))))) true))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south (lambda (is_interior $0 (has_color (tile_to_block $0) blue)))))) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (negate_boolean false)))))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (negate_boolean false)))))))) true false))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) false) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) false) false))", "(lambda (to_min_grid (singleton_block (find_blocks_by_color $0 (nth_primary_color (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) (negate_boolean true)) 0) (negate_boolean true) (negate_boolean true))) true))", "(lambda (to_min_grid (singleton_block (find_blocks_by_color $0 (nth_primary_color (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) (negate_boolean true)) 0) (negate_boolean true) (negate_boolean true))) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 2) true) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 2) true) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 0)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 1)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 2)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 3)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 4)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 5)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 6)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 7)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 8)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_min_tiles (grid_to_block $0) 9)))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda false)) (lambda (grow (extend_towards_until $0 west (lambda true)) 6))) true) (negate_boolean false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (is_exterior $0 false)))))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (extend_towards_until $0 south (lambda (negate_boolean (is_interior $0 (is_exterior $0 (is_exterior $0 false)))))))) false false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 3) true) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 3) true) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 1) true) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 1) true) false))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) invisible)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) black)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) blue)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) red)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) green)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) yellow)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) grey)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) pink)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) orange)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) teal)))", "(lambda (to_original_grid_overlay (extend_towards_until (block_to_tile (grow (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) 6)) south_west (lambda true)) (has_color (grid_to_block $0) maroon)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 4) true) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (find_same_color_blocks $0 (is_tile (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true)) true)) (negate_boolean true)) (lambda 4) true) false))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) invisible)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) black)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) blue)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) red)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) green)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) yellow)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) grey)))", "(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (extend_towards_until (get_block_center (grow (grid_to_block $0) 4)) south_west (lambda true)))) (has_color (singleton_block (find_blocks_by_inferred_b $0 false true)) pink)))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 4, "0,1": 4, "0,2": 4, "0,3": 4, "0,4": 4, "0,5": 4, "0,6": 4, "0,7": 2, "0,8": 2, "0,9": 2, "0,10": 2, "0,11": 2, "0,12": 2, "0,13": 2, "0,14": 8, "0,15": 8, "1,0": 4, "1,1": 4, "1,2": 4, "1,3": 4, "1,4": 4, "1,5": 4, "1,6": 4, "1,7": 4, "1,8": 2, "1,9": 2, "1,10": 2, "1,11": 2, "1,12": 8, "1,13": 8, "1,14": 8, "1,15": 8, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 4, "2,4": 4, "2,5": 4, "2,6": 4, "2,7": 4, "2,8": 2, "2,9": 2, "2,10": 2, "2,11": 2, "2,12": 8, "2,13": 8, "2,14": 8, "2,15": 8, "3,0": 4, "3,1": 4, "3,2": 4, "3,3": 4, "3,4": 4, "3,5": 4, "3,6": 4, "3,7": 2, "3,8": 2, "3,9": 2, "3,10": 2, "3,11": 2, "3,12": 8, "3,13": 8, "3,14": 8, "3,15": 8, "4,0": 4, "4,1": 4, "4,2": 4, "4,3": 4, "4,4": 4, "4,5": 4, "4,6": 2, "4,7": 2, "4,8": 2, "4,9": 2, "4,10": 2, "4,11": 2, "4,12": 2, "4,13": 8, "4,14": 8, "4,15": 8, "5,0": 4, "5,1": 4, "5,2": 4, "5,3": 4, "5,4": 4, "5,5": 4, "5,6": 2, "5,7": 2, "5,8": 2, "5,9": 2, "5,10": 2, "5,11": 2, "5,12": 8, "5,13": 8, "5,14": 8, "5,15": 8, "6,0": 4, "6,1": 4, "6,2": 4, "6,3": 4, "6,4": 4, "6,5": 4, "6,6": 4, "6,7": 2, "6,8": 2, "6,9": 2, "6,10": 2, "6,11": 2, "6,12": 8, "6,13": 8, "6,14": 8, "6,15": 8, "7,0": 4, "7,1": 4, "7,2": 4, "7,3": 4, "7,4": 4, "7,5": 4, "7,6": 4, "7,7": 2, "7,8": 2, "7,9": 2, "7,10": 2, "7,11": 2, "7,12": 2, "7,13": 8, "7,14": 8, "7,15": 8, "8,0": 4, "8,1": 4, "8,2": 4, "8,3": 4, "8,4": 4, "8,5": 2, "8,6": 2, "8,7": 2, "8,8": 2, "8,9": 2, "8,10": 2, "8,11": 2, "8,12": 2, "8,13": 2, "8,14": 8, "8,15": 8, "9,0": 4, "9,1": 4, "9,2": 4, "9,3": 4, "9,4": 4, "9,5": 2, "9,6": 2, "9,7": 2, "9,8": 2, "9,9": 2, "9,10": 2, "9,11": 2, "9,12": 2, "9,13": 2, "9,14": 8, "9,15": 8, "10,0": 4, "10,1": 4, "10,2": 4, "10,3": 4, "10,4": 2, "10,5": 2, "10,6": 2, "10,7": 2, "10,8": 2, "10,9": 2, "10,10": 2, "10,11": 2, "10,12": 2, "10,13": 8, "10,14": 8, "10,15": 8, "11,0": 4, "11,1": 4, "11,2": 4, "11,3": 4, "11,4": 2, "11,5": 2, "11,6": 2, "11,7": 2, "11,8": 2, "11,9": 2, "11,10": 2, "11,11": 2, "11,12": 8, "11,13": 8, "11,14": 8, "11,15": 8, "12,0": 4, "12,1": 4, "12,2": 4, "12,3": 4, "12,4": 4, "12,5": 2, "12,6": 2, "12,7": 2, "12,8": 2, "12,9": 2, "12,10": 2, "12,11": 2, "12,12": 8, "12,13": 8, "12,14": 8, "12,15": 8, "13,0": 4, "13,1": 4, "13,2": 4, "13,3": 4, "13,4": 4, "13,5": 4, "13,6": 2, "13,7": 2, "13,8": 2, "13,9": 2, "13,10": 2, "13,11": 2, "13,12": 2, "13,13": 8, "13,14": 8, "13,15": 8}}], "output": {"grid": {"0,0": 4, "0,1": 2, "0,2": 8}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "0,3": 2, "0,4": 2, "0,5": 2, "0,6": 2, "1,0": 2, "1,1": 2, "1,2": 2, "1,3": 2, "1,4": 2, "1,5": 2, "1,6": 2, "2,0": 2, "2,1": 2, "2,2": 2, "2,3": 2, "2,4": 2, "2,5": 2, "2,6": 2, "3,0": 2, "3,1": 8, "3,2": 8, "3,3": 8, "3,4": 2, "3,5": 2, "3,6": 8, "4,0": 8, "4,1": 8, "4,2": 8, "4,3": 8, "4,4": 8, "4,5": 8, "4,6": 8, "5,0": 8, "5,1": 8, "5,2": 8, "5,3": 8, "5,4": 8, "5,5": 8, "5,6": 8, "6,0": 8, "6,1": 8, "6,2": 8, "6,3": 5, "6,4": 5, "6,5": 8, "6,6": 8, "7,0": 5, "7,1": 8, "7,2": 5, "7,3": 5, "7,4": 5, "7,5": 5, "7,6": 5, "8,0": 5, "8,1": 5, "8,2": 5, "8,3": 5, "8,4": 5, "8,5": 5, "8,6": 5}}], "output": {"grid": {"0,0": 2, "1,0": 8, "2,0": 5}}}, {"inputs": [{"grid": {"0,0": 6, "0,1": 6, "0,2": 6, "0,3": 6, "0,4": 6, "0,5": 6, "0,6": 6, "0,7": 6, "0,8": 6, "1,0": 6, "1,1": 6, "1,2": 4, "1,3": 4, "1,4": 6, "1,5": 6, "1,6": 6, "1,7": 6, "1,8": 6, "2,0": 6, "2,1": 4, "2,2": 4, "2,3": 4, "2,4": 6, "2,5": 4, "2,6": 6, "2,7": 4, "2,8": 4, "3,0": 4, "3,1": 4, "3,2": 4, "3,3": 4, "3,4": 4, "3,5": 4, "3,6": 4, "3,7": 4, "3,8": 4, "4,0": 4, "4,1": 4, "4,2": 4, "4,3": 4, "4,4": 4, "4,5": 4, "4,6": 4, "4,7": 4, "4,8": 4, "5,0": 4, "5,1": 4, "5,2": 4, "5,3": 4, "5,4": 4, "5,5": 4, "5,6": 4, "5,7": 4, "5,8": 4, "6,0": 4, "6,1": 2, "6,2": 2, "6,3": 4, "6,4": 4, "6,5": 4, "6,6": 2, "6,7": 2, "6,8": 4, "7,0": 2, "7,1": 2, "7,2": 2, "7,3": 2, "7,4": 2, "7,5": 2, "7,6": 2, "7,7": 2, "7,8": 2, "8,0": 2, "8,1": 3, "8,2": 2, "8,3": 2, "8,4": 2, "8,5": 2, "8,6": 2, "8,7": 3, "8,8": 3, "9,0": 3, "9,1": 3, "9,2": 3, "9,3": 3, "9,4": 3, "9,5": 3, "9,6": 3, "9,7": 3, "9,8": 3, "10,0": 3, "10,1": 3, "10,2": 3, "10,3": 3, "10,4": 3, "10,5": 3, "10,6": 3, "10,7": 3, "10,8": 3}}], "output": {"grid": {"0,0": 6, "1,0": 4, "2,0": 2, "3,0": 3}}}], "name": "4be741c5.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) false))", "(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (is_tile (grid_to_block $0))) true))", "(lambda (to_original_grid_overlay (reflect (grid_to_block $0) (is_tile (grid_to_block $0))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true)))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true)))) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) orange))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) orange))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink orange) red))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink orange) red))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink blue) grey))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink blue) grey))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) grey))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) grey))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange orange) green))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange orange) green))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) green))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) green))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange pink) maroon))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange pink) maroon))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange maroon) invisible))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange maroon) invisible))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) invisible pink) red))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) invisible pink) red))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) green pink) maroon))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) green pink) maroon))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) red))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) red))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) invisible pink) red))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) invisible pink) red))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink red) red))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink red) red))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow pink) yellow))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow pink) yellow))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) red orange) invisible))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) red orange) invisible))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange teal) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange teal) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) green grey) blue))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) green grey) blue))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) (get_tile_color $0) red) red))))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) (get_tile_color $0) red) red))))) true false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) invisible red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) invisible red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange maroon) invisible))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange maroon) invisible))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow red) grey))))) (negate_boolean false) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow red) grey))))) (negate_boolean false) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) red))))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green red) invisible false) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green red) invisible false) false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) green))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) green))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) red red) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) red red) grey))))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) orange false) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) orange false) false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange pink) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) orange pink) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow red) yellow))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) yellow red) yellow))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) red orange) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) red orange) red))))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green blue) black true) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green blue) black true) false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible red) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible red) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange orange) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange orange) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) red pink) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) red pink) grey))))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) pink false) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) pink false) false)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green red) orange false) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) green red) orange false) false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) orange))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) orange pink) orange))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red pink) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) pink blue) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) pink blue) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green orange) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green orange) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) invisible invisible) invisible))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) invisible invisible) invisible))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red orange) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red orange) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) invisible))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) invisible))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) red) red red) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) red orange) invisible))))) (negate_boolean false) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) red orange) invisible))))) (negate_boolean false) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green red) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) green red) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink green) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) black) pink green) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) (get_tile_color $0) red) pink))))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) (get_tile_color $0) red) pink))))) false false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange black) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange black) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange maroon) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange maroon) grey))))) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) black true) true)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (grid_to_block $0))) (is_symmetrical (wrap_block (replace_color (box_block (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false)) pink red) black true) false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) grey))))) false (negate_boolean true)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) invisible) invisible pink) grey))))) false (negate_boolean false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange red) grey))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) teal) orange red) grey))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange red) red))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) orange red) red))))) (negate_boolean true) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink red) yellow))))) (negate_boolean true) true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (tile_to_block (get_block_center (remove_color (replace_color (fill_color (grid_to_block $1) pink) pink red) yellow))))) (negate_boolean true) false))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 9, "0,1": 9, "0,2": 5, "0,3": 9, "1,0": 5, "1,1": 5, "1,2": 9, "1,3": 9, "2,0": 9, "2,1": 5, "2,2": 9, "2,3": 9}}], "output": {"grid": {"0,0": 9, "0,1": 5, "0,2": 9, "0,3": 9, "1,0": 5, "1,1": 5, "1,2": 9, "1,3": 9, "2,0": 9, "2,1": 9, "2,2": 5, "2,3": 9, "3,0": 9, "3,1": 9, "3,2": 5, "3,3": 9, "4,0": 5, "4,1": 5, "4,2": 9, "4,3": 9, "5,0": 9, "5,1": 5, "5,2": 9, "5,3": 9}}}, {"inputs": [{"grid": {"0,0": 4, "0,1": 1, "0,2": 1, "0,3": 4, "1,0": 1, "1,1": 1, "1,2": 1, "1,3": 1, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 1}}], "output": {"grid": {"0,0": 4, "0,1": 4, "0,2": 4, "0,3": 1, "1,0": 1, "1,1": 1, "1,2": 1, "1,3": 1, "2,0": 4, "2,1": 1, "2,2": 1, "2,3": 4, "3,0": 4, "3,1": 1, "3,2": 1, "3,3": 4, "4,0": 1, "4,1": 1, "4,2": 1, "4,3": 1, "5,0": 4, "5,1": 4, "5,2": 4, "5,3": 1}}}, {"inputs": [{"grid": {"0,0": 9, "0,1": 4, "0,2": 9, "0,3": 4, "1,0": 9, "1,1": 9, "1,2": 4, "1,3": 4, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 4}}], "output": {"grid": {"0,0": 4, "0,1": 4, "0,2": 4, "0,3": 4, "1,0": 9, "1,1": 9, "1,2": 4, "1,3": 4, "2,0": 9, "2,1": 4, "2,2": 9, "2,3": 4, "3,0": 9, "3,1": 4, "3,2": 9, "3,3": 4, "4,0": 9, "4,1": 9, "4,2": 4, "4,3": 4, "5,0": 4, "5,1": 4, "5,2": 4, "5,3": 4}}}, {"inputs": [{"grid": {"0,0": 3, "0,1": 3, "0,2": 5, "0,3": 5, "1,0": 3, "1,1": 5, "1,2": 5, "1,3": 3, "2,0": 5, "2,1": 5, "2,2": 3, "2,3": 3}}], "output": {"grid": {"0,0": 5, "0,1": 5, "0,2": 3, "0,3": 3, "1,0": 3, "1,1": 5, "1,2": 5, "1,3": 3, "2,0": 3, "2,1": 3, "2,2": 5, "2,3": 5, "3,0": 3, "3,1": 3, "3,2": 5, "3,3": 5, "4,0": 3, "4,1": 5, "4,2": 5, "4,3": 3, "5,0": 5, "5,1": 5, "5,2": 3, "5,3": 3}}}], "name": "4c4377d9.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (tile_to_block (block_to_tile (grid_to_block $0))) true))", "(lambda (to_original_grid_overlay (tile_to_block (block_to_tile (grid_to_block $0))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda $0)) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda $0)) true) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) true))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) true))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) true)))) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) black))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) black))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) black))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) black))) true) (negate_boolean false)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda false)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda false)) false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda true)) false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) west (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) west (lambda true)) false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) north (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) north (lambda true)) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_east (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_east (lambda true)) false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south (lambda true)) true))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south (lambda true)) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean false)))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_west 8) 6)) false) true true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_west 8) 6)) false) true false))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda true)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda true)) (negate_boolean false)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south (lambda true)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south (lambda true)) (negate_boolean false)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda false)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_west (lambda false)) (negate_boolean false)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_east (lambda true)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) south_east (lambda true)) (negate_boolean false)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) north (lambda true)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) north (lambda true)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) true) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) west (lambda true)) (negate_boolean true)))", "(lambda (to_min_grid (move_towards_until (block_to_tile (move (remove_color (remove_black_b (grid_to_block $0)) green) 0 south (negate_boolean true))) west (lambda true)) (negate_boolean false)))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_east 3) 5)) false) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_east 3) 5)) false) false false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) invisible))) false) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) teal))) true) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (grid_to_block $1)))))) true) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (singleton_block (find_same_color_blocks $1 (negate_boolean true) (negate_boolean true)))))) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean (negate_boolean false))))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (grid_to_block $0) (get_original_grid_height (merge_blocks (find_same_color_blocks $0 (negate_boolean (negate_boolean true)) true) true)))) false) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (grid_to_block $0) (get_original_grid_height (merge_blocks (find_same_color_blocks $0 (negate_boolean (negate_boolean true)) true) true)))) false) false false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) invisible)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) black)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) blue)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) red)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) green)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) yellow)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) grey)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) pink)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) orange)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) teal)))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) maroon))) true) (has_color (grid_to_block $0) maroon)))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_east 3) 5)) false) false (negate_boolean true)))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_east 3) 5)) false) false (negate_boolean false)))", "(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 (is_rectangle (remove_black_b (tile_to_block $0)) (is_exterior $0 false)))))) (lambda true)) true))", "(lambda (to_original_grid_overlay (filter_block_tiles (remove_black_b (filter_block_tiles (grid_to_block $0) (lambda (is_exterior $0 (is_rectangle (remove_black_b (tile_to_block $0)) (is_exterior $0 false)))))) (lambda true)) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) pink))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) pink))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) black))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) black))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south_east (lambda true))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south_east (lambda true))))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) red))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) red))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (tile_overlaps_block $0 (remove_black_b (box_block (grid_to_block $1)))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (tile_overlaps_block $0 (remove_black_b (box_block (grid_to_block $1)))))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south_west (lambda true))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south_west (lambda true))))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south (lambda true))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (tile_to_block $0)) (touches_any_boundary (extend_towards_until $0 south (lambda true))))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) invisible))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_same_color_blocks $1 (negate_boolean (negate_boolean (negate_boolean true))) true)) invisible))) true) false))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_west 3) 6)) false) (negate_boolean true) true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_west 3) 6)) false) (negate_boolean true) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (fill_color (singleton_block (find_blocks_by_black_b $1 false false)) pink))) true) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 (is_tile (grow (duplicate (center_block_on_tile (grid_to_block $0) (block_to_tile (grid_to_block $0))) south_east 3) 6)) false) (negate_boolean true) true))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 2, "3,4": 0, "3,5": 0, "3,6": 2, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "3,13": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 2, "4,4": 2, "4,5": 0, "4,6": 2, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 2, "5,6": 2, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 2, "6,5": 2, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 2, "7,4": 0, "7,5": 0, "7,6": 4, "7,7": 0, "7,8": 4, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 4, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "8,13": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 4, "9,7": 0, "9,8": 4, "9,9": 0, "9,10": 0, "9,11": 0, "9,12": 0, "9,13": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "10,12": 0, "10,13": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0, "11,11": 0, "11,12": 0, "11,13": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0, "12,13": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "13,8": 0, "13,9": 0, "13,10": 0, "13,11": 0, "13,12": 0, "13,13": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 2, "3,4": 0, "3,5": 0, "3,6": 2, "3,7": 0, "3,8": 2, "3,9": 0, "3,10": 0, "3,11": 2, "3,12": 0, "3,13": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 2, "4,4": 2, "4,5": 0, "4,6": 2, "4,7": 0, "4,8": 2, "4,9": 0, "4,10": 2, "4,11": 2, "4,12": 0, "4,13": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 2, "5,6": 2, "5,7": 0, "5,8": 2, "5,9": 2, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 2, "6,5": 2, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 2, "6,10": 2, "6,11": 0, "6,12": 0, "6,13": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 2, "7,4": 0, "7,5": 0, "7,6": 4, "7,7": 0, "7,8": 4, "7,9": 0, "7,10": 0, "7,11": 2, "7,12": 0, "7,13": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 4, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "8,13": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 2, "9,4": 0, "9,5": 0, "9,6": 4, "9,7": 0, "9,8": 4, "9,9": 0, "9,10": 0, "9,11": 2, "9,12": 0, "9,13": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 2, "10,5": 2, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 2, "10,10": 2, "10,11": 0, "10,12": 0, "10,13": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 2, "11,6": 2, "11,7": 0, "11,8": 2, "11,9": 2, "11,10": 0, "11,11": 0, "11,12": 0, "11,13": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 2, "12,4": 2, "12,5": 0, "12,6": 2, "12,7": 0, "12,8": 2, "12,9": 0, "12,10": 2, "12,11": 2, "12,12": 0, "12,13": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 2, "13,4": 0, "13,5": 0, "13,6": 2, "13,7": 0, "13,8": 2, "13,9": 0, "13,10": 0, "13,11": 2, "13,12": 0, "13,13": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 8, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "3,13": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 8, "4,8": 8, "4,9": 8, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 8, "5,7": 8, "5,8": 8, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 3, "6,5": 0, "6,6": 3, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 3, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 3, "8,5": 0, "8,6": 3, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "8,13": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "9,12": 0, "9,13": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "10,12": 0, "10,13": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0, "11,11": 0, "11,12": 0, "11,13": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0, "12,13": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "13,8": 0, "13,9": 0, "13,10": 0, "13,11": 0, "13,12": 0, "13,13": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "1,13": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "2,13": 0, "3,0": 0, "3,1": 0, "3,2": 8, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 8, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "3,13": 0, "4,0": 0, "4,1": 8, "4,2": 8, "4,3": 8, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 8, "4,8": 8, "4,9": 8, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "5,0": 0, "5,1": 0, "5,2": 8, "5,3": 8, "5,4": 8, "5,5": 0, "5,6": 8, "5,7": 8, "5,8": 8, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 3, "6,5": 0, "6,6": 3, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 3, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 3, "8,5": 0, "8,6": 3, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "8,13": 0, "9,0": 0, "9,1": 0, "9,2": 8, "9,3": 8, "9,4": 8, "9,5": 0, "9,6": 8, "9,7": 8, "9,8": 8, "9,9": 0, "9,10": 0, "9,11": 0, "9,12": 0, "9,13": 0, "10,0": 0, "10,1": 8, "10,2": 8, "10,3": 8, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 8, "10,8": 8, "10,9": 8, "10,10": 0, "10,11": 0, "10,12": 0, "10,13": 0, "11,0": 0, "11,1": 0, "11,2": 8, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 8, "11,9": 0, "11,10": 0, "11,11": 0, "11,12": 0, "11,13": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0, "12,13": 0, "13,0": 0, "13,1": 0, "13,2": 0, "13,3": 0, "13,4": 0, "13,5": 0, "13,6": 0, "13,7": 0, "13,8": 0, "13,9": 0, "13,10": 0, "13,11": 0, "13,12": 0, "13,13": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 8, "6,5": 0, "6,6": 8, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 8, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 8, "8,5": 0, "8,6": 8, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 1, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 0, "10,1": 1, "10,2": 0, "10,3": 1, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "11,0": 0, "11,1": 0, "11,2": 1, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0, "11,11": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 0, "3,1": 0, "3,2": 1, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 1, "3,9": 0, "3,10": 0, "3,11": 0, "4,0": 0, "4,1": 1, "4,2": 0, "4,3": 1, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 1, "4,8": 0, "4,9": 1, "4,10": 0, "4,11": 0, "5,0": 0, "5,1": 0, "5,2": 1, "5,3": 1, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 1, "5,8": 1, "5,9": 0, "5,10": 0, "5,11": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 8, "6,5": 0, "6,6": 8, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 8, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 8, "8,5": 0, "8,6": 8, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 1, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 1, "9,8": 1, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 0, "10,1": 1, "10,2": 0, "10,3": 1, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 1, "10,8": 0, "10,9": 1, "10,10": 0, "10,11": 0, "11,0": 0, "11,1": 0, "11,2": 1, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 1, "11,9": 0, "11,10": 0, "11,11": 0}}}], "name": "4c5c2cf0.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_min_grid (grid_to_block $0) (negate_boolean true)))", "(lambda (to_min_grid (grid_to_block $0) (negate_boolean false)))", "(lambda (to_original_grid_overlay (grid_to_block $0) (negate_boolean true)))", "(lambda (to_original_grid_overlay (grid_to_block $0) (negate_boolean false)))", "(lambda (blocks_to_original_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true true))", "(lambda (blocks_to_original_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true false))", "(lambda (to_original_grid_overlay (remove_color (grid_to_block $0) red) true))", "(lambda (to_original_grid_overlay (remove_color (grid_to_block $0) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) maroon) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) maroon) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) grey) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) grey) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) maroon) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) maroon) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) teal) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) teal) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) invisible) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) invisible) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) black) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean true))))) black) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean false)))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean false)))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean true)))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean true)))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) grey) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) grey) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean true)))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean true)))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) red) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) pink))) (lambda true))) false) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) pink))) (lambda true))) false) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) red) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) red))) (lambda true))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) red))) (lambda true))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) black))) (lambda true))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) black))) (lambda true))) true) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean false)))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean false)))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean (negate_boolean (negate_boolean true)))))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 0)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 1)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 2)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 3)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 4)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 5)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 6)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 7)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 8)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (has_min_tiles (grid_to_block $0) 9)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) grey) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) grey) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) teal) (touches_any_boundary (box_block (grid_to_block $0)))))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean (negate_boolean true))))) green) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean (negate_boolean true))))) green) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) red) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) red) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) grey) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean (negate_boolean true))))) grey) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) black))) (lambda true))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) black))) (lambda true))) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) red))) (lambda true))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (has_color (grid_to_block $1) red))) (lambda true))) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean (negate_boolean true))))) blue) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean (negate_boolean true))))) blue) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) invisible) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south) (negate_boolean true)))) invisible) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north) (negate_boolean (negate_boolean true))))) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (grid_to_block $0) south_west) (negate_boolean true)))) red) (negate_boolean (is_tile (grid_to_block $0)))))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) grey) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) grey) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) pink) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) north_east) (negate_boolean true)))) pink) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) pink) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (remove_black_b (singleton_block (find_same_color_blocks $0 (touches_boundary (tile_to_block (get_block_center (grid_to_block $0))) south_west) (negate_boolean true)))) pink) (negate_boolean false)))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 5, "0,8": 0, "0,9": 0, "0,10": 5, "0,11": 5, "0,12": 5, "0,13": 5, "0,14": 5, "0,15": 5, "0,16": 0, "0,17": 0, "0,18": 5, "0,19": 0, "0,20": 0, "0,21": 0, "1,0": 0, "1,1": 5, "1,2": 0, "1,3": 0, "1,4": 5, "1,5": 5, "1,6": 5, "1,7": 5, "1,8": 0, "1,9": 0, "1,10": 5, "1,11": 0, "1,12": 5, "1,13": 0, "1,14": 5, "1,15": 0, "1,16": 0, "1,17": 5, "1,18": 0, "1,19": 0, "1,20": 5, "1,21": 5, "2,0": 5, "2,1": 0, "2,2": 5, "2,3": 5, "2,4": 0, "2,5": 5, "2,6": 5, "2,7": 5, "2,8": 0, "2,9": 0, "2,10": 5, "2,11": 5, "2,12": 2, "2,13": 0, "2,14": 0, "2,15": 0, "2,16": 0, "2,17": 0, "2,18": 0, "2,19": 0, "2,20": 5, "2,21": 0, "3,0": 5, "3,1": 0, "3,2": 0, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 5, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 2, "3,13": 5, "3,14": 5, "3,15": 5, "3,16": 0, "3,17": 5, "3,18": 5, "3,19": 5, "3,20": 0, "3,21": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 5, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 5, "4,10": 0, "4,11": 0, "4,12": 2, "4,13": 5, "4,14": 5, "4,15": 0, "4,16": 0, "4,17": 5, "4,18": 0, "4,19": 5, "4,20": 5, "4,21": 0, "5,0": 0, "5,1": 5, "5,2": 0, "5,3": 0, "5,4": 5, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 5, "5,9": 2, "5,10": 5, "5,11": 2, "5,12": 5, "5,13": 5, "5,14": 5, "5,15": 2, "5,16": 5, "5,17": 0, "5,18": 5, "5,19": 0, "5,20": 0, "5,21": 0, "6,0": 0, "6,1": 5, "6,2": 5, "6,3": 0, "6,4": 5, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 5, "6,11": 0, "6,12": 2, "6,13": 5, "6,14": 0, "6,15": 0, "6,16": 5, "6,17": 0, "6,18": 0, "6,19": 5, "6,20": 5, "6,21": 5, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 5, "7,10": 5, "7,11": 0, "7,12": 2, "7,13": 5, "7,14": 0, "7,15": 5, "7,16": 5, "7,17": 0, "7,18": 5, "7,19": 0, "7,20": 0, "7,21": 0, "8,0": 5, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 5, "8,7": 0, "8,8": 5, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 2, "8,13": 0, "8,14": 0, "8,15": 0, "8,16": 0, "8,17": 0, "8,18": 0, "8,19": 5, "8,20": 0, "8,21": 5, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 5, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 0, "9,12": 5, "9,13": 5, "9,14": 0, "9,15": 0, "9,16": 0, "9,17": 0, "9,18": 0, "9,19": 5, "9,20": 0, "9,21": 0, "10,0": 0, "10,1": 5, "10,2": 0, "10,3": 5, "10,4": 0, "10,5": 5, "10,6": 5, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 0, "10,11": 0, "10,12": 0, "10,13": 0, "10,14": 5, "10,15": 0, "10,16": 5, "10,17": 5, "10,18": 5, "10,19": 0, "10,20": 5, "10,21": 5, "11,0": 0, "11,1": 5, "11,2": 5, "11,3": 0, "11,4": 0, "11,5": 5, "11,6": 0, "11,7": 0, "11,8": 5, "11,9": 0, "11,10": 5, "11,11": 5, "11,12": 0, "11,13": 5, "11,14": 5, "11,15": 0, "11,16": 5, "11,17": 5, "11,18": 0, "11,19": 0, "11,20": 5, "11,21": 5, "12,0": 0, "12,1": 0, "12,2": 5, "12,3": 5, "12,4": 0, "12,5": 2, "12,6": 5, "12,7": 5, "12,8": 5, "12,9": 0, "12,10": 0, "12,11": 5, "12,12": 0, "12,13": 0, "12,14": 0, "12,15": 0, "12,16": 0, "12,17": 5, "12,18": 5, "12,19": 0, "12,20": 0, "12,21": 0, "13,0": 5, "13,1": 0, "13,2": 5, "13,3": 0, "13,4": 0, "13,5": 5, "13,6": 5, "13,7": 5, "13,8": 0, "13,9": 0, "13,10": 0, "13,11": 0, "13,12": 0, "13,13": 5, "13,14": 0, "13,15": 0, "13,16": 5, "13,17": 5, "13,18": 0, "13,19": 0, "13,20": 0, "13,21": 5, "14,0": 0, "14,1": 0, "14,2": 2, "14,3": 5, "14,4": 5, "14,5": 2, "14,6": 2, "14,7": 2, "14,8": 2, "14,9": 0, "14,10": 0, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 0, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 5, "14,19": 0, "14,20": 5, "14,21": 0, "15,0": 0, "15,1": 5, "15,2": 5, "15,3": 0, "15,4": 0, "15,5": 5, "15,6": 5, "15,7": 0, "15,8": 5, "15,9": 0, "15,10": 0, "15,11": 5, "15,12": 0, "15,13": 0, "15,14": 5, "15,15": 5, "15,16": 5, "15,17": 0, "15,18": 0, "15,19": 0, "15,20": 0, "15,21": 0, "16,0": 5, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 5, "16,5": 2, "16,6": 0, "16,7": 5, "16,8": 5, "16,9": 0, "16,10": 5, "16,11": 0, "16,12": 0, "16,13": 5, "16,14": 0, "16,15": 0, "16,16": 5, "16,17": 5, "16,18": 5, "16,19": 0, "16,20": 0, "16,21": 0, "17,0": 0, "17,1": 0, "17,2": 5, "17,3": 5, "17,4": 0, "17,5": 2, "17,6": 5, "17,7": 0, "17,8": 0, "17,9": 0, "17,10": 5, "17,11": 0, "17,12": 0, "17,13": 0, "17,14": 5, "17,15": 5, "17,16": 0, "17,17": 0, "17,18": 0, "17,19": 5, "17,20": 5, "17,21": 5, "18,0": 0, "18,1": 5, "18,2": 5, "18,3": 5, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 5, "18,8": 5, "18,9": 5, "18,10": 5, "18,11": 0, "18,12": 0, "18,13": 5, "18,14": 5, "18,15": 0, "18,16": 5, "18,17": 0, "18,18": 0, "18,19": 0, "18,20": 5, "18,21": 5, "19,0": 0, "19,1": 0, "19,2": 0, "19,3": 0, "19,4": 0, "19,5": 0, "19,6": 0, "19,7": 0, "19,8": 0, "19,9": 0, "19,10": 0, "19,11": 0, "19,12": 0, "19,13": 5, "19,14": 0, "19,15": 5, "19,16": 0, "19,17": 5, "19,18": 0, "19,19": 0, "19,20": 0, "19,21": 5}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 5, "0,8": 0, "0,9": 0, "0,10": 5, "0,11": 5, "0,12": 5, "0,13": 5, "0,14": 5, "0,15": 5, "0,16": 0, "0,17": 0, "0,18": 5, "0,19": 0, "0,20": 0, "0,21": 0, "1,0": 0, "1,1": 5, "1,2": 0, "1,3": 0, "1,4": 5, "1,5": 5, "1,6": 5, "1,7": 5, "1,8": 0, "1,9": 0, "1,10": 5, "1,11": 0, "1,12": 5, "1,13": 0, "1,14": 5, "1,15": 0, "1,16": 0, "1,17": 5, "1,18": 0, "1,19": 0, "1,20": 5, "1,21": 5, "2,0": 5, "2,1": 0, "2,2": 5, "2,3": 5, "2,4": 0, "2,5": 5, "2,6": 5, "2,7": 5, "2,8": 0, "2,9": 0, "2,10": 5, "2,11": 5, "2,12": 2, "2,13": 0, "2,14": 0, "2,15": 0, "2,16": 0, "2,17": 0, "2,18": 0, "2,19": 0, "2,20": 5, "2,21": 0, "3,0": 5, "3,1": 0, "3,2": 0, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 5, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 2, "3,13": 5, "3,14": 5, "3,15": 5, "3,16": 0, "3,17": 5, "3,18": 5, "3,19": 5, "3,20": 0, "3,21": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 5, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 5, "4,10": 0, "4,11": 0, "4,12": 2, "4,13": 5, "4,14": 5, "4,15": 0, "4,16": 0, "4,17": 5, "4,18": 0, "4,19": 5, "4,20": 5, "4,21": 0, "5,0": 0, "5,1": 5, "5,2": 0, "5,3": 0, "5,4": 5, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 5, "5,9": 2, "5,10": 8, "5,11": 2, "5,12": 8, "5,13": 8, "5,14": 8, "5,15": 2, "5,16": 5, "5,17": 0, "5,18": 5, "5,19": 0, "5,20": 0, "5,21": 0, "6,0": 0, "6,1": 5, "6,2": 5, "6,3": 0, "6,4": 5, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 5, "6,11": 0, "6,12": 2, "6,13": 5, "6,14": 0, "6,15": 0, "6,16": 5, "6,17": 0, "6,18": 0, "6,19": 5, "6,20": 5, "6,21": 5, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 5, "7,10": 5, "7,11": 0, "7,12": 2, "7,13": 5, "7,14": 0, "7,15": 5, "7,16": 5, "7,17": 0, "7,18": 5, "7,19": 0, "7,20": 0, "7,21": 0, "8,0": 5, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 5, "8,7": 0, "8,8": 5, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 2, "8,13": 0, "8,14": 0, "8,15": 0, "8,16": 0, "8,17": 0, "8,18": 0, "8,19": 5, "8,20": 0, "8,21": 5, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 5, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 0, "9,12": 5, "9,13": 5, "9,14": 0, "9,15": 0, "9,16": 0, "9,17": 0, "9,18": 0, "9,19": 5, "9,20": 0, "9,21": 0, "10,0": 0, "10,1": 5, "10,2": 0, "10,3": 5, "10,4": 0, "10,5": 5, "10,6": 5, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 0, "10,11": 0, "10,12": 0, "10,13": 0, "10,14": 5, "10,15": 0, "10,16": 5, "10,17": 5, "10,18": 5, "10,19": 0, "10,20": 5, "10,21": 5, "11,0": 0, "11,1": 5, "11,2": 5, "11,3": 0, "11,4": 0, "11,5": 8, "11,6": 0, "11,7": 0, "11,8": 5, "11,9": 0, "11,10": 5, "11,11": 5, "11,12": 0, "11,13": 5, "11,14": 5, "11,15": 0, "11,16": 5, "11,17": 5, "11,18": 0, "11,19": 0, "11,20": 5, "11,21": 5, "12,0": 0, "12,1": 0, "12,2": 5, "12,3": 5, "12,4": 0, "12,5": 2, "12,6": 5, "12,7": 5, "12,8": 5, "12,9": 0, "12,10": 0, "12,11": 5, "12,12": 0, "12,13": 0, "12,14": 0, "12,15": 0, "12,16": 0, "12,17": 5, "12,18": 5, "12,19": 0, "12,20": 0, "12,21": 0, "13,0": 5, "13,1": 0, "13,2": 5, "13,3": 0, "13,4": 0, "13,5": 8, "13,6": 5, "13,7": 5, "13,8": 0, "13,9": 0, "13,10": 0, "13,11": 0, "13,12": 0, "13,13": 5, "13,14": 0, "13,15": 0, "13,16": 5, "13,17": 5, "13,18": 0, "13,19": 0, "13,20": 0, "13,21": 5, "14,0": 0, "14,1": 0, "14,2": 2, "14,3": 8, "14,4": 8, "14,5": 2, "14,6": 2, "14,7": 2, "14,8": 2, "14,9": 0, "14,10": 0, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 0, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 5, "14,19": 0, "14,20": 5, "14,21": 0, "15,0": 0, "15,1": 5, "15,2": 5, "15,3": 0, "15,4": 0, "15,5": 8, "15,6": 5, "15,7": 0, "15,8": 5, "15,9": 0, "15,10": 0, "15,11": 5, "15,12": 0, "15,13": 0, "15,14": 5, "15,15": 5, "15,16": 5, "15,17": 0, "15,18": 0, "15,19": 0, "15,20": 0, "15,21": 0, "16,0": 5, "16,1": 0, "16,2": 0, "16,3": 0, "16,4": 5, "16,5": 2, "16,6": 0, "16,7": 5, "16,8": 5, "16,9": 0, "16,10": 5, "16,11": 0, "16,12": 0, "16,13": 5, "16,14": 0, "16,15": 0, "16,16": 5, "16,17": 5, "16,18": 5, "16,19": 0, "16,20": 0, "16,21": 0, "17,0": 0, "17,1": 0, "17,2": 5, "17,3": 5, "17,4": 0, "17,5": 2, "17,6": 5, "17,7": 0, "17,8": 0, "17,9": 0, "17,10": 5, "17,11": 0, "17,12": 0, "17,13": 0, "17,14": 5, "17,15": 5, "17,16": 0, "17,17": 0, "17,18": 0, "17,19": 5, "17,20": 5, "17,21": 5, "18,0": 0, "18,1": 5, "18,2": 5, "18,3": 5, "18,4": 0, "18,5": 0, "18,6": 0, "18,7": 5, "18,8": 5, "18,9": 5, "18,10": 5, "18,11": 0, "18,12": 0, "18,13": 5, "18,14": 5, "18,15": 0, "18,16": 5, "18,17": 0, "18,18": 0, "18,19": 0, "18,20": 5, "18,21": 5, "19,0": 0, "19,1": 0, "19,2": 0, "19,3": 0, "19,4": 0, "19,5": 0, "19,6": 0, "19,7": 0, "19,8": 0, "19,9": 0, "19,10": 0, "19,11": 0, "19,12": 0, "19,13": 5, "19,14": 0, "19,15": 5, "19,16": 0, "19,17": 5, "19,18": 0, "19,19": 0, "19,20": 0, "19,21": 5}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 5, "0,2": 0, "0,3": 5, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 5, "0,8": 5, "0,9": 0, "0,10": 5, "0,11": 5, "0,12": 0, "0,13": 0, "0,14": 0, "0,15": 5, "0,16": 5, "0,17": 0, "0,18": 5, "0,19": 5, "1,0": 5, "1,1": 5, "1,2": 0, "1,3": 5, "1,4": 5, "1,5": 5, "1,6": 0, "1,7": 5, "1,8": 5, "1,9": 0, "1,10": 5, "1,11": 0, "1,12": 0, "1,13": 5, "1,14": 0, "1,15": 0, "1,16": 0, "1,17": 5, "1,18": 5, "1,19": 0, "2,0": 0, "2,1": 5, "2,2": 0, "2,3": 5, "2,4": 5, "2,5": 0, "2,6": 5, "2,7": 5, "2,8": 0, "2,9": 5, "2,10": 0, "2,11": 0, "2,12": 5, "2,13": 0, "2,14": 0, "2,15": 5, "2,16": 0, "2,17": 0, "2,18": 5, "2,19": 5, "3,0": 5, "3,1": 0, "3,2": 0, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 2, "3,7": 5, "3,8": 0, "3,9": 5, "3,10": 0, "3,11": 5, "3,12": 0, "3,13": 0, "3,14": 0, "3,15": 5, "3,16": 5, "3,17": 5, "3,18": 5, "3,19": 5, "4,0": 0, "4,1": 5, "4,2": 0, "4,3": 5, "4,4": 2, "4,5": 5, "4,6": 2, "4,7": 2, "4,8": 2, "4,9": 0, "4,10": 5, "4,11": 5, "4,12": 0, "4,13": 5, "4,14": 0, "4,15": 5, "4,16": 5, "4,17": 0, "4,18": 0, "4,19": 0, "5,0": 5, "5,1": 5, "5,2": 0, "5,3": 0, "5,4": 5, "5,5": 5, "5,6": 2, "5,7": 5, "5,8": 5, "5,9": 5, "5,10": 0, "5,11": 5, "5,12": 0, "5,13": 0, "5,14": 5, "5,15": 5, "5,16": 0, "5,17": 0, "5,18": 0, "5,19": 0, "6,0": 0, "6,1": 0, "6,2": 5, "6,3": 5, "6,4": 0, "6,5": 0, "6,6": 5, "6,7": 5, "6,8": 0, "6,9": 0, "6,10": 5, "6,11": 5, "6,12": 0, "6,13": 0, "6,14": 5, "6,15": 0, "6,16": 0, "6,17": 5, "6,18": 0, "6,19": 5, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 5, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 5, "7,8": 5, "7,9": 5, "7,10": 0, "7,11": 5, "7,12": 5, "7,13": 5, "7,14": 0, "7,15": 0, "7,16": 5, "7,17": 5, "7,18": 0, "7,19": 5, "8,0": 5, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 5, "8,5": 0, "8,6": 0, "8,7": 5, "8,8": 5, "8,9": 5, "8,10": 5, "8,11": 0, "8,12": 5, "8,13": 5, "8,14": 5, "8,15": 0, "8,16": 0, "8,17": 5, "8,18": 0, "8,19": 5, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 5, "9,4": 0, "9,5": 5, "9,6": 5, "9,7": 5, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 0, "9,12": 5, "9,13": 0, "9,14": 5, "9,15": 5, "9,16": 5, "9,17": 5, "9,18": 5, "9,19": 5, "10,0": 5, "10,1": 0, "10,2": 5, "10,3": 5, "10,4": 0, "10,5": 5, "10,6": 5, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 0, "10,11": 5, "10,12": 2, "10,13": 5, "10,14": 2, "10,15": 2, "10,16": 2, "10,17": 0, "10,18": 0, "10,19": 5, "11,0": 0, "11,1": 0, "11,2": 5, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 5, "11,10": 5, "11,11": 5, "11,12": 0, "11,13": 0, "11,14": 5, "11,15": 0, "11,16": 0, "11,17": 5, "11,18": 0, "11,19": 5, "12,0": 0, "12,1": 0, "12,2": 5, "12,3": 0, "12,4": 0, "12,5": 5, "12,6": 0, "12,7": 5, "12,8": 5, "12,9": 0, "12,10": 5, "12,11": 5, "12,12": 5, "12,13": 5, "12,14": 5, "12,15": 5, "12,16": 5, "12,17": 5, "12,18": 5, "12,19": 0, "13,0": 5, "13,1": 5, "13,2": 0, "13,3": 0, "13,4": 5, "13,5": 5, "13,6": 0, "13,7": 5, "13,8": 0, "13,9": 0, "13,10": 5, "13,11": 5, "13,12": 5, "13,13": 0, "13,14": 0, "13,15": 0, "13,16": 0, "13,17": 0, "13,18": 0, "13,19": 0, "14,0": 5, "14,1": 5, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 5, "14,6": 5, "14,7": 5, "14,8": 0, "14,9": 5, "14,10": 5, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 5, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 5, "14,19": 5, "15,0": 0, "15,1": 0, "15,2": 5, "15,3": 0, "15,4": 5, "15,5": 5, "15,6": 5, "15,7": 2, "15,8": 2, "15,9": 5, "15,10": 5, "15,11": 0, "15,12": 0, "15,13": 5, "15,14": 0, "15,15": 0, "15,16": 5, "15,17": 5, "15,18": 0, "15,19": 0, "16,0": 0, "16,1": 5, "16,2": 5, "16,3": 0, "16,4": 0, "16,5": 5, "16,6": 5, "16,7": 2, "16,8": 5, "16,9": 0, "16,10": 5, "16,11": 5, "16,12": 0, "16,13": 0, "16,14": 5, "16,15": 0, "16,16": 5, "16,17": 5, "16,18": 0, "16,19": 0, "17,0": 0, "17,1": 0, "17,2": 5, "17,3": 0, "17,4": 5, "17,5": 0, "17,6": 5, "17,7": 5, "17,8": 0, "17,9": 5, "17,10": 5, "17,11": 5, "17,12": 0, "17,13": 0, "17,14": 5, "17,15": 0, "17,16": 0, "17,17": 0, "17,18": 5, "17,19": 0, "18,0": 0, "18,1": 0, "18,2": 5, "18,3": 0, "18,4": 5, "18,5": 5, "18,6": 0, "18,7": 5, "18,8": 5, "18,9": 5, "18,10": 0, "18,11": 5, "18,12": 5, "18,13": 5, "18,14": 0, "18,15": 5, "18,16": 0, "18,17": 0, "18,18": 5, "18,19": 5, "19,0": 5, "19,1": 5, "19,2": 5, "19,3": 0, "19,4": 5, "19,5": 0, "19,6": 5, "19,7": 0, "19,8": 5, "19,9": 5, "19,10": 0, "19,11": 0, "19,12": 5, "19,13": 5, "19,14": 0, "19,15": 0, "19,16": 0, "19,17": 0, "19,18": 0, "19,19": 5}}], "output": {"grid": {"0,0": 0, "0,1": 5, "0,2": 0, "0,3": 5, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 5, "0,8": 5, "0,9": 0, "0,10": 5, "0,11": 5, "0,12": 0, "0,13": 0, "0,14": 0, "0,15": 5, "0,16": 5, "0,17": 0, "0,18": 5, "0,19": 5, "1,0": 5, "1,1": 5, "1,2": 0, "1,3": 5, "1,4": 5, "1,5": 5, "1,6": 0, "1,7": 5, "1,8": 5, "1,9": 0, "1,10": 5, "1,11": 0, "1,12": 0, "1,13": 5, "1,14": 0, "1,15": 0, "1,16": 0, "1,17": 5, "1,18": 5, "1,19": 0, "2,0": 0, "2,1": 5, "2,2": 0, "2,3": 5, "2,4": 5, "2,5": 0, "2,6": 8, "2,7": 5, "2,8": 0, "2,9": 5, "2,10": 0, "2,11": 0, "2,12": 5, "2,13": 0, "2,14": 0, "2,15": 5, "2,16": 0, "2,17": 0, "2,18": 5, "2,19": 5, "3,0": 5, "3,1": 0, "3,2": 0, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 2, "3,7": 5, "3,8": 0, "3,9": 5, "3,10": 0, "3,11": 5, "3,12": 0, "3,13": 0, "3,14": 0, "3,15": 5, "3,16": 5, "3,17": 5, "3,18": 5, "3,19": 5, "4,0": 0, "4,1": 5, "4,2": 0, "4,3": 5, "4,4": 2, "4,5": 8, "4,6": 2, "4,7": 2, "4,8": 2, "4,9": 0, "4,10": 5, "4,11": 5, "4,12": 0, "4,13": 5, "4,14": 0, "4,15": 5, "4,16": 5, "4,17": 0, "4,18": 0, "4,19": 0, "5,0": 5, "5,1": 5, "5,2": 0, "5,3": 0, "5,4": 5, "5,5": 5, "5,6": 2, "5,7": 5, "5,8": 5, "5,9": 5, "5,10": 0, "5,11": 5, "5,12": 0, "5,13": 0, "5,14": 5, "5,15": 5, "5,16": 0, "5,17": 0, "5,18": 0, "5,19": 0, "6,0": 0, "6,1": 0, "6,2": 5, "6,3": 5, "6,4": 0, "6,5": 0, "6,6": 8, "6,7": 5, "6,8": 0, "6,9": 0, "6,10": 5, "6,11": 5, "6,12": 0, "6,13": 0, "6,14": 5, "6,15": 0, "6,16": 0, "6,17": 5, "6,18": 0, "6,19": 5, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 5, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 5, "7,8": 5, "7,9": 5, "7,10": 0, "7,11": 5, "7,12": 5, "7,13": 5, "7,14": 0, "7,15": 0, "7,16": 5, "7,17": 5, "7,18": 0, "7,19": 5, "8,0": 5, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 5, "8,5": 0, "8,6": 0, "8,7": 5, "8,8": 5, "8,9": 5, "8,10": 5, "8,11": 0, "8,12": 5, "8,13": 5, "8,14": 8, "8,15": 0, "8,16": 0, "8,17": 5, "8,18": 0, "8,19": 5, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 5, "9,4": 0, "9,5": 5, "9,6": 5, "9,7": 5, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 0, "9,12": 5, "9,13": 0, "9,14": 8, "9,15": 5, "9,16": 5, "9,17": 5, "9,18": 5, "9,19": 5, "10,0": 5, "10,1": 0, "10,2": 5, "10,3": 5, "10,4": 0, "10,5": 5, "10,6": 5, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 0, "10,11": 5, "10,12": 2, "10,13": 8, "10,14": 2, "10,15": 2, "10,16": 2, "10,17": 0, "10,18": 0, "10,19": 5, "11,0": 0, "11,1": 0, "11,2": 5, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 5, "11,10": 5, "11,11": 5, "11,12": 0, "11,13": 0, "11,14": 8, "11,15": 0, "11,16": 0, "11,17": 5, "11,18": 0, "11,19": 5, "12,0": 0, "12,1": 0, "12,2": 5, "12,3": 0, "12,4": 0, "12,5": 5, "12,6": 0, "12,7": 5, "12,8": 5, "12,9": 0, "12,10": 5, "12,11": 5, "12,12": 5, "12,13": 5, "12,14": 8, "12,15": 5, "12,16": 5, "12,17": 5, "12,18": 5, "12,19": 0, "13,0": 5, "13,1": 5, "13,2": 0, "13,3": 0, "13,4": 5, "13,5": 5, "13,6": 0, "13,7": 8, "13,8": 0, "13,9": 0, "13,10": 5, "13,11": 5, "13,12": 5, "13,13": 0, "13,14": 0, "13,15": 0, "13,16": 0, "13,17": 0, "13,18": 0, "13,19": 0, "14,0": 5, "14,1": 5, "14,2": 0, "14,3": 0, "14,4": 0, "14,5": 5, "14,6": 5, "14,7": 8, "14,8": 0, "14,9": 5, "14,10": 5, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 5, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 5, "14,19": 5, "15,0": 0, "15,1": 0, "15,2": 5, "15,3": 0, "15,4": 5, "15,5": 8, "15,6": 8, "15,7": 2, "15,8": 2, "15,9": 8, "15,10": 5, "15,11": 0, "15,12": 0, "15,13": 5, "15,14": 0, "15,15": 0, "15,16": 5, "15,17": 5, "15,18": 0, "15,19": 0, "16,0": 0, "16,1": 5, "16,2": 5, "16,3": 0, "16,4": 0, "16,5": 5, "16,6": 5, "16,7": 2, "16,8": 5, "16,9": 0, "16,10": 5, "16,11": 5, "16,12": 0, "16,13": 0, "16,14": 5, "16,15": 0, "16,16": 5, "16,17": 5, "16,18": 0, "16,19": 0, "17,0": 0, "17,1": 0, "17,2": 5, "17,3": 0, "17,4": 5, "17,5": 0, "17,6": 5, "17,7": 8, "17,8": 0, "17,9": 5, "17,10": 5, "17,11": 5, "17,12": 0, "17,13": 0, "17,14": 5, "17,15": 0, "17,16": 0, "17,17": 0, "17,18": 5, "17,19": 0, "18,0": 0, "18,1": 0, "18,2": 5, "18,3": 0, "18,4": 5, "18,5": 5, "18,6": 0, "18,7": 5, "18,8": 5, "18,9": 5, "18,10": 0, "18,11": 5, "18,12": 5, "18,13": 5, "18,14": 0, "18,15": 5, "18,16": 0, "18,17": 0, "18,18": 5, "18,19": 5, "19,0": 5, "19,1": 5, "19,2": 5, "19,3": 0, "19,4": 5, "19,5": 0, "19,6": 5, "19,7": 0, "19,8": 5, "19,9": 5, "19,10": 0, "19,11": 0, "19,12": 5, "19,13": 5, "19,14": 0, "19,15": 0, "19,16": 0, "19,17": 0, "19,18": 0, "19,19": 5}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 5, "0,3": 0, "0,4": 5, "0,5": 0, "0,6": 5, "0,7": 5, "0,8": 5, "0,9": 5, "0,10": 0, "0,11": 5, "0,12": 5, "0,13": 0, "0,14": 0, "0,15": 0, "0,16": 5, "0,17": 5, "0,18": 0, "1,0": 0, "1,1": 0, "1,2": 5, "1,3": 5, "1,4": 5, "1,5": 0, "1,6": 5, "1,7": 5, "1,8": 5, "1,9": 5, "1,10": 0, "1,11": 0, "1,12": 5, "1,13": 5, "1,14": 5, "1,15": 5, "1,16": 5, "1,17": 0, "1,18": 5, "2,0": 0, "2,1": 5, "2,2": 5, "2,3": 5, "2,4": 0, "2,5": 5, "2,6": 0, "2,7": 5, "2,8": 5, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 5, "2,13": 5, "2,14": 5, "2,15": 0, "2,16": 5, "2,17": 0, "2,18": 0, "3,0": 5, "3,1": 5, "3,2": 5, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 5, "3,9": 5, "3,10": 5, "3,11": 5, "3,12": 5, "3,13": 5, "3,14": 0, "3,15": 0, "3,16": 5, "3,17": 0, "3,18": 0, "4,0": 5, "4,1": 5, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 5, "4,6": 5, "4,7": 5, "4,8": 0, "4,9": 5, "4,10": 5, "4,11": 5, "4,12": 5, "4,13": 0, "4,14": 0, "4,15": 0, "4,16": 5, "4,17": 0, "4,18": 0, "5,0": 5, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 5, "5,7": 0, "5,8": 5, "5,9": 0, "5,10": 5, "5,11": 2, "5,12": 5, "5,13": 0, "5,14": 0, "5,15": 5, "5,16": 0, "5,17": 5, "5,18": 5, "6,0": 5, "6,1": 0, "6,2": 5, "6,3": 0, "6,4": 0, "6,5": 5, "6,6": 5, "6,7": 0, "6,8": 5, "6,9": 2, "6,10": 2, "6,11": 5, "6,12": 2, "6,13": 2, "6,14": 5, "6,15": 5, "6,16": 0, "6,17": 5, "6,18": 0, "7,0": 0, "7,1": 5, "7,2": 0, "7,3": 5, "7,4": 5, "7,5": 5, "7,6": 5, "7,7": 5, "7,8": 0, "7,9": 5, "7,10": 0, "7,11": 5, "7,12": 5, "7,13": 5, "7,14": 5, "7,15": 0, "7,16": 5, "7,17": 5, "7,18": 5, "8,0": 5, "8,1": 5, "8,2": 5, "8,3": 0, "8,4": 5, "8,5": 5, "8,6": 5, "8,7": 5, "8,8": 0, "8,9": 0, "8,10": 5, "8,11": 2, "8,12": 5, "8,13": 5, "8,14": 5, "8,15": 0, "8,16": 0, "8,17": 0, "8,18": 0, "9,0": 5, "9,1": 2, "9,2": 2, "9,3": 5, "9,4": 0, "9,5": 0, "9,6": 5, "9,7": 0, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 5, "9,12": 5, "9,13": 5, "9,14": 5, "9,15": 5, "9,16": 5, "9,17": 0, "9,18": 0, "10,0": 5, "10,1": 2, "10,2": 5, "10,3": 5, "10,4": 5, "10,5": 0, "10,6": 0, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 5, "10,11": 0, "10,12": 0, "10,13": 5, "10,14": 5, "10,15": 5, "10,16": 5, "10,17": 0, "10,18": 5, "11,0": 0, "11,1": 2, "11,2": 5, "11,3": 0, "11,4": 5, "11,5": 5, "11,6": 0, "11,7": 0, "11,8": 5, "11,9": 5, "11,10": 5, "11,11": 5, "11,12": 5, "11,13": 0, "11,14": 5, "11,15": 5, "11,16": 5, "11,17": 5, "11,18": 0, "12,0": 0, "12,1": 5, "12,2": 0, "12,3": 0, "12,4": 5, "12,5": 5, "12,6": 0, "12,7": 0, "12,8": 5, "12,9": 5, "12,10": 0, "12,11": 0, "12,12": 5, "12,13": 0, "12,14": 0, "12,15": 5, "12,16": 0, "12,17": 0, "12,18": 0, "13,0": 5, "13,1": 0, "13,2": 0, "13,3": 5, "13,4": 5, "13,5": 5, "13,6": 5, "13,7": 5, "13,8": 0, "13,9": 0, "13,10": 5, "13,11": 5, "13,12": 5, "13,13": 0, "13,14": 5, "13,15": 5, "13,16": 5, "13,17": 0, "13,18": 5, "14,0": 0, "14,1": 5, "14,2": 5, "14,3": 5, "14,4": 0, "14,5": 0, "14,6": 5, "14,7": 0, "14,8": 0, "14,9": 0, "14,10": 5, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 5, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 0, "15,0": 5, "15,1": 5, "15,2": 0, "15,3": 0, "15,4": 5, "15,5": 5, "15,6": 5, "15,7": 5, "15,8": 0, "15,9": 5, "15,10": 5, "15,11": 0, "15,12": 5, "15,13": 0, "15,14": 5, "15,15": 0, "15,16": 0, "15,17": 0, "15,18": 0, "16,0": 5, "16,1": 0, "16,2": 5, "16,3": 0, "16,4": 5, "16,5": 0, "16,6": 0, "16,7": 0, "16,8": 0, "16,9": 0, "16,10": 0, "16,11": 5, "16,12": 0, "16,13": 0, "16,14": 5, "16,15": 0, "16,16": 5, "16,17": 0, "16,18": 5, "17,0": 0, "17,1": 5, "17,2": 5, "17,3": 0, "17,4": 5, "17,5": 0, "17,6": 0, "17,7": 0, "17,8": 0, "17,9": 0, "17,10": 5, "17,11": 0, "17,12": 0, "17,13": 5, "17,14": 0, "17,15": 5, "17,16": 5, "17,17": 5, "17,18": 5}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 5, "0,3": 0, "0,4": 5, "0,5": 0, "0,6": 5, "0,7": 5, "0,8": 5, "0,9": 5, "0,10": 0, "0,11": 5, "0,12": 5, "0,13": 0, "0,14": 0, "0,15": 0, "0,16": 5, "0,17": 5, "0,18": 0, "1,0": 0, "1,1": 0, "1,2": 5, "1,3": 5, "1,4": 5, "1,5": 0, "1,6": 5, "1,7": 5, "1,8": 5, "1,9": 5, "1,10": 0, "1,11": 0, "1,12": 5, "1,13": 5, "1,14": 5, "1,15": 5, "1,16": 5, "1,17": 0, "1,18": 5, "2,0": 0, "2,1": 5, "2,2": 5, "2,3": 5, "2,4": 0, "2,5": 5, "2,6": 0, "2,7": 5, "2,8": 5, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 5, "2,13": 5, "2,14": 5, "2,15": 0, "2,16": 5, "2,17": 0, "2,18": 0, "3,0": 5, "3,1": 5, "3,2": 5, "3,3": 5, "3,4": 5, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 5, "3,9": 5, "3,10": 5, "3,11": 5, "3,12": 5, "3,13": 5, "3,14": 0, "3,15": 0, "3,16": 5, "3,17": 0, "3,18": 0, "4,0": 5, "4,1": 5, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 5, "4,6": 5, "4,7": 5, "4,8": 0, "4,9": 5, "4,10": 5, "4,11": 8, "4,12": 5, "4,13": 0, "4,14": 0, "4,15": 0, "4,16": 5, "4,17": 0, "4,18": 0, "5,0": 5, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 5, "5,7": 0, "5,8": 5, "5,9": 0, "5,10": 5, "5,11": 2, "5,12": 5, "5,13": 0, "5,14": 0, "5,15": 5, "5,16": 0, "5,17": 5, "5,18": 5, "6,0": 5, "6,1": 0, "6,2": 5, "6,3": 0, "6,4": 0, "6,5": 5, "6,6": 5, "6,7": 0, "6,8": 5, "6,9": 2, "6,10": 2, "6,11": 8, "6,12": 2, "6,13": 2, "6,14": 5, "6,15": 5, "6,16": 0, "6,17": 5, "6,18": 0, "7,0": 0, "7,1": 8, "7,2": 0, "7,3": 5, "7,4": 5, "7,5": 5, "7,6": 5, "7,7": 5, "7,8": 0, "7,9": 5, "7,10": 0, "7,11": 8, "7,12": 5, "7,13": 5, "7,14": 5, "7,15": 0, "7,16": 5, "7,17": 5, "7,18": 5, "8,0": 5, "8,1": 8, "8,2": 5, "8,3": 0, "8,4": 5, "8,5": 5, "8,6": 5, "8,7": 5, "8,8": 0, "8,9": 0, "8,10": 5, "8,11": 2, "8,12": 5, "8,13": 5, "8,14": 5, "8,15": 0, "8,16": 0, "8,17": 0, "8,18": 0, "9,0": 8, "9,1": 2, "9,2": 2, "9,3": 8, "9,4": 0, "9,5": 0, "9,6": 5, "9,7": 0, "9,8": 0, "9,9": 5, "9,10": 5, "9,11": 5, "9,12": 5, "9,13": 5, "9,14": 5, "9,15": 5, "9,16": 5, "9,17": 0, "9,18": 0, "10,0": 5, "10,1": 2, "10,2": 5, "10,3": 5, "10,4": 5, "10,5": 0, "10,6": 0, "10,7": 5, "10,8": 5, "10,9": 5, "10,10": 5, "10,11": 0, "10,12": 0, "10,13": 5, "10,14": 5, "10,15": 5, "10,16": 5, "10,17": 0, "10,18": 5, "11,0": 0, "11,1": 2, "11,2": 5, "11,3": 0, "11,4": 5, "11,5": 5, "11,6": 0, "11,7": 0, "11,8": 5, "11,9": 5, "11,10": 5, "11,11": 5, "11,12": 5, "11,13": 0, "11,14": 5, "11,15": 5, "11,16": 5, "11,17": 5, "11,18": 0, "12,0": 0, "12,1": 5, "12,2": 0, "12,3": 0, "12,4": 5, "12,5": 5, "12,6": 0, "12,7": 0, "12,8": 5, "12,9": 5, "12,10": 0, "12,11": 0, "12,12": 5, "12,13": 0, "12,14": 0, "12,15": 5, "12,16": 0, "12,17": 0, "12,18": 0, "13,0": 5, "13,1": 0, "13,2": 0, "13,3": 5, "13,4": 5, "13,5": 5, "13,6": 5, "13,7": 5, "13,8": 0, "13,9": 0, "13,10": 5, "13,11": 5, "13,12": 5, "13,13": 0, "13,14": 5, "13,15": 5, "13,16": 5, "13,17": 0, "13,18": 5, "14,0": 0, "14,1": 5, "14,2": 5, "14,3": 5, "14,4": 0, "14,5": 0, "14,6": 5, "14,7": 0, "14,8": 0, "14,9": 0, "14,10": 5, "14,11": 0, "14,12": 5, "14,13": 5, "14,14": 5, "14,15": 5, "14,16": 0, "14,17": 0, "14,18": 0, "15,0": 5, "15,1": 5, "15,2": 0, "15,3": 0, "15,4": 5, "15,5": 5, "15,6": 5, "15,7": 5, "15,8": 0, "15,9": 5, "15,10": 5, "15,11": 0, "15,12": 5, "15,13": 0, "15,14": 5, "15,15": 0, "15,16": 0, "15,17": 0, "15,18": 0, "16,0": 5, "16,1": 0, "16,2": 5, "16,3": 0, "16,4": 5, "16,5": 0, "16,6": 0, "16,7": 0, "16,8": 0, "16,9": 0, "16,10": 0, "16,11": 5, "16,12": 0, "16,13": 0, "16,14": 5, "16,15": 0, "16,16": 5, "16,17": 0, "16,18": 5, "17,0": 0, "17,1": 5, "17,2": 5, "17,3": 0, "17,4": 5, "17,5": 0, "17,6": 0, "17,7": 0, "17,8": 0, "17,9": 0, "17,10": 5, "17,11": 0, "17,12": 0, "17,13": 5, "17,14": 0, "17,15": 5, "17,16": 5, "17,17": 5, "17,18": 5}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 5, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 5, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 5, "1,0": 5, "1,1": 0, "1,2": 5, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 5, "1,9": 0, "1,10": 0, "1,11": 5, "2,0": 5, "2,1": 0, "2,2": 5, "2,3": 0, "2,4": 0, "2,5": 5, "2,6": 5, "2,7": 0, "2,8": 2, "2,9": 0, "2,10": 5, "2,11": 0, "3,0": 5, "3,1": 5, "3,2": 0, "3,3": 0, "3,4": 5, "3,5": 0, "3,6": 5, "3,7": 0, "3,8": 2, "3,9": 5, "3,10": 0, "3,11": 5, "4,0": 5, "4,1": 0, "4,2": 0, "4,3": 5, "4,4": 5, "4,5": 5, "4,6": 2, "4,7": 5, "4,8": 2, "4,9": 2, "4,10": 2, "4,11": 0, "5,0": 5, "5,1": 5, "5,2": 5, "5,3": 0, "5,4": 5, "5,5": 5, "5,6": 0, "5,7": 5, "5,8": 2, "5,9": 0, "5,10": 0, "5,11": 5, "6,0": 5, "6,1": 5, "6,2": 5, "6,3": 0, "6,4": 5, "6,5": 0, "6,6": 0, "6,7": 5, "6,8": 5, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 5, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 5, "8,2": 5, "8,3": 0, "8,4": 5, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 5, "8,10": 0, "8,11": 0, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 5, "9,5": 5, "9,6": 5, "9,7": 5, "9,8": 5, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 5, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 5, "10,6": 0, "10,7": 0, "10,8": 5, "10,9": 5, "10,10": 5, "10,11": 5}}], "output": {"grid": {"0,0": 0, "0,1": 5, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 5, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 5, "1,0": 5, "1,1": 0, "1,2": 5, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 5, "1,9": 0, "1,10": 0, "1,11": 5, "2,0": 5, "2,1": 0, "2,2": 5, "2,3": 0, "2,4": 0, "2,5": 5, "2,6": 5, "2,7": 0, "2,8": 2, "2,9": 0, "2,10": 5, "2,11": 0, "3,0": 5, "3,1": 5, "3,2": 0, "3,3": 0, "3,4": 5, "3,5": 0, "3,6": 5, "3,7": 0, "3,8": 2, "3,9": 5, "3,10": 0, "3,11": 5, "4,0": 5, "4,1": 0, "4,2": 0, "4,3": 5, "4,4": 5, "4,5": 5, "4,6": 2, "4,7": 8, "4,8": 2, "4,9": 2, "4,10": 2, "4,11": 0, "5,0": 5, "5,1": 5, "5,2": 5, "5,3": 0, "5,4": 5, "5,5": 5, "5,6": 0, "5,7": 5, "5,8": 2, "5,9": 0, "5,10": 0, "5,11": 5, "6,0": 5, "6,1": 5, "6,2": 5, "6,3": 0, "6,4": 5, "6,5": 0, "6,6": 0, "6,7": 5, "6,8": 8, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 5, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 5, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 5, "8,2": 5, "8,3": 0, "8,4": 5, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 5, "8,10": 0, "8,11": 0, "9,0": 5, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 5, "9,5": 5, "9,6": 5, "9,7": 5, "9,8": 5, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 5, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 5, "10,6": 0, "10,7": 0, "10,8": 5, "10,9": 5, "10,10": 5, "10,11": 5}}}], "name": "50846271.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_original_grid_overlay (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) true))", "(lambda (to_original_grid_overlay (map_block_tiles (tile_to_block (get_block_center (grid_to_block $0))) (lambda $0)) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (negate_boolean (tile_overlaps_block $0 (box_block (tile_to_block $0)))))))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (negate_boolean (tile_overlaps_block $0 (box_block (tile_to_block $0)))))))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (negate_boolean (tile_overlaps_block $0 (box_block (tile_to_block $0)))))))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (negate_boolean (tile_overlaps_block $0 (box_block (tile_to_block $0)))))))) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) north))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) north))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) south_west))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) south_west))))) true) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (box_block (tile_to_block $0)))))) (lambda true)) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (box_block (tile_to_block $0)))))) (lambda true)) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean true)) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean true)) false))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 6) true))) 4) true) true))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 6) true))) 4) true) false))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) pink) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) pink) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda false)) (lambda true))) (lambda true))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda false)) (lambda true))) (lambda true))) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) red) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) red) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) grey)) true)))) true) (is_tile (grid_to_block $0))))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean true)) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean true)) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) north)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) south)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) north_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) north_west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) south_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false true)) south_west)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda true))) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean (negate_boolean true))) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean (negate_boolean true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) north)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) south)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) north_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) north_west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) south_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_inferred_b $0 false false)) south_west)))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) green) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) green) false))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (box_block (tile_to_block $0)))))) (lambda true)) true) (negate_boolean true)))", "(lambda (to_original_grid_overlay (merge_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (box_block (tile_to_block $0)))))) (lambda true)) true) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) teal) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true)) true) teal) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) (is_exterior $0 false))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) (is_exterior $0 false))))) true) false))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) true))) 0) true) true))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) true))) 0) true) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) north)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) south)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) north_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) north_west)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) south_east)))", "(lambda (to_min_grid (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false)) (lambda true))) (touches_boundary (singleton_block (find_blocks_by_black_b $0 false false)) south_west)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) south_west))))) (is_tile (grid_to_block $0))) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) south_west))))) (is_tile (grid_to_block $0))) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) red red) 4))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) red red) 4))) false false))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) pink) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) pink) false))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) invisible) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) orange invisible) 6))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) orange invisible) 6))) true false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda false)) (lambda (negate_boolean true)))) (lambda true))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda false)) (lambda (negate_boolean true)))) (lambda true))) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south_west (lambda true)))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south_west (lambda true)))))))) true) false))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 6) true))) 4) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 6) true))) 4) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) (is_exterior $0 false))))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) (is_exterior $0 false))))) true) (negate_boolean false)))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) true))) 0) true) (negate_boolean true)))", "(lambda (to_min_grid (reflect (grow (center_block_on_tile (box_block (grid_to_block $0)) (block_to_tile (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 3) true))) 0) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean (negate_boolean true))) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) invisible)) true)))) (negate_boolean (negate_boolean true))) (negate_boolean false)))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) pink green) 7))) true true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) pink green) 7))) true false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south))))) false) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south))))) false) false))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) pink orange) 6))) false true))", "(lambda (blocks_to_original_grid (map_tiles (find_tiles_by_black_b $0) (lambda (grow (replace_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) pink orange) 6))) false false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) east))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) east))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 north_east (lambda false)))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 north_east (lambda false)))))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south_east (lambda false)))))))) false) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south_east (lambda false)))))))) false) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south (lambda true)))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 south (lambda true)))))))) true) false))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) red) true))", "(lambda (to_original_grid_overlay (fill_color (merge_blocks (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda (negate_boolean true))) (lambda true)) true) red) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 north_east (lambda true)))))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block $0 (box_block (extend_towards_until $0 north_east (lambda true)))))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south_east))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (touches_boundary (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))) false) south_east))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block (block_to_tile (fill_color (grid_to_block $1) invisible)) (grid_to_block $1)))))) true) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (tile_overlaps_block (block_to_tile (fill_color (grid_to_block $1) invisible)) (grid_to_block $1)))))) true) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (remove_color (grid_to_block $1) red)) (tile_overlaps_block $0 (tile_to_block $0)))))) true) true))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 2, "0,11": 2, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 2, "1,11": 2, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 2, "2,11": 2, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 2, "3,11": 2, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 2, "4,11": 2, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 2, "5,11": 2, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 2, "6,11": 2, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 2, "7,11": 2, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 2, "8,11": 2, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 2, "9,11": 2, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 8, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 2, "10,11": 2, "11,0": 0, "11,1": 0, "11,2": 8, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 2, "11,11": 2}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 3, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 2, "0,11": 2, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 3, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 2, "1,11": 2, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 3, "2,8": 0, "2,9": 0, "2,10": 2, "2,11": 2, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 3, "3,9": 0, "3,10": 2, "3,11": 2, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 3, "4,10": 2, "4,11": 2, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 3, "5,9": 0, "5,10": 2, "5,11": 2, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 3, "6,8": 0, "6,9": 0, "6,10": 2, "6,11": 2, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 3, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 2, "7,11": 2, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 3, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 2, "8,11": 2, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 3, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 2, "9,11": 2, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 8, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 2, "10,11": 2, "11,0": 0, "11,1": 0, "11,2": 8, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 2, "11,11": 2}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 8, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 0, "3,1": 8, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "4,0": 0, "4,1": 0, "4,2": 8, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 2, "9,1": 2, "9,2": 2, "9,3": 2, "9,4": 2, "9,5": 2, "9,6": 2, "9,7": 2, "9,8": 2, "9,9": 2, "9,10": 2, "9,11": 2, "10,0": 2, "10,1": 2, "10,2": 2, "10,3": 2, "10,4": 2, "10,5": 2, "10,6": 2, "10,7": 2, "10,8": 2, "10,9": 2, "10,10": 2, "10,11": 2, "11,0": 2, "11,1": 2, "11,2": 2, "11,3": 2, "11,4": 2, "11,5": 2, "11,6": 2, "11,7": 2, "11,8": 2, "11,9": 2, "11,10": 2, "11,11": 2}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 8, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 0, "3,1": 8, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 3, "4,0": 0, "4,1": 0, "4,2": 8, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 3, "4,11": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 3, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 3, "5,10": 0, "5,11": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 3, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 3, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 3, "7,6": 0, "7,7": 3, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 3, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 2, "9,1": 2, "9,2": 2, "9,3": 2, "9,4": 2, "9,5": 2, "9,6": 2, "9,7": 2, "9,8": 2, "9,9": 2, "9,10": 2, "9,11": 2, "10,0": 2, "10,1": 2, "10,2": 2, "10,3": 2, "10,4": 2, "10,5": 2, "10,6": 2, "10,7": 2, "10,8": 2, "10,9": 2, "10,10": 2, "10,11": 2, "11,0": 2, "11,1": 2, "11,2": 2, "11,3": 2, "11,4": 2, "11,5": 2, "11,6": 2, "11,7": 2, "11,8": 2, "11,9": 2, "11,10": 2, "11,11": 2}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 2, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 2, "1,1": 2, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 2, "2,1": 2, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 2, "3,1": 2, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "4,0": 2, "4,1": 2, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "5,0": 2, "5,1": 2, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "6,0": 2, "6,1": 2, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 2, "7,1": 2, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 2, "8,1": 2, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 2, "9,1": 2, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 8, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 2, "10,1": 2, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 8, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "11,0": 2, "11,1": 2, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 8, "11,9": 0, "11,10": 0, "11,11": 0}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 3, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "1,0": 2, "1,1": 2, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 3, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "2,0": 2, "2,1": 2, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 3, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "3,0": 2, "3,1": 2, "3,2": 0, "3,3": 0, "3,4": 3, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "4,0": 2, "4,1": 2, "4,2": 0, "4,3": 3, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "5,0": 2, "5,1": 2, "5,2": 3, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "6,0": 2, "6,1": 2, "6,2": 0, "6,3": 3, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "7,0": 2, "7,1": 2, "7,2": 0, "7,3": 0, "7,4": 3, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "8,0": 2, "8,1": 2, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 3, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "9,0": 2, "9,1": 2, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 8, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "10,0": 2, "10,1": 2, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 8, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "11,0": 2, "11,1": 2, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 8, "11,9": 0, "11,10": 0, "11,11": 0}}}], "name": "508bd3b6.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) true)))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) false)))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) blue) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) blue) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) black (negate_boolean true)) teal) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) black (negate_boolean true)) teal) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) black (negate_boolean true)) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) black (negate_boolean true)) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) pink) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) pink) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (negate_boolean true))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (negate_boolean false))))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) black) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) black) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) true))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) false))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) (negate_boolean true)))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue red) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue red) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange pink) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange pink) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink invisible) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink invisible) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) south)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) south)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) south_west)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) south_west)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink red) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink red) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) west)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) west)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red invisible) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red invisible) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange orange) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange orange) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) north_east)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) north_east)) false))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) west)) true))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) west)) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) invisible))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) black))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) blue))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) red))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) green))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) yellow))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) grey))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) pink))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) orange))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) teal))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_rectangle (box_block (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)) (has_color (grid_to_block $0) maroon))))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink yellow) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red red) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink pink) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (fill_color (wrap_block (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda false))) invisible (negate_boolean true)) yellow) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink black) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange orange) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange orange) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red orange) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange invisible) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red invisible) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red invisible) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink invisible) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink invisible) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue pink) south_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red pink) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange pink) south)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange pink) south)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) north_east)) (negate_boolean true)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible red) north_east)) (negate_boolean false)))", "(lambda (to_original_grid_overlay (reflect (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (touches_boundary (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange red) north_east)) (negate_boolean true)))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "0,14": 0, "1,0": 0, "1,1": 0, "1,2": 2, "1,3": 2, "1,4": 2, "1,5": 2, "1,6": 2, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 1, "1,11": 1, "1,12": 1, "1,13": 0, "1,14": 0, "2,0": 0, "2,1": 0, "2,2": 2, "2,3": 2, "2,4": 2, "2,5": 2, "2,6": 2, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 1, "2,11": 1, "2,12": 1, "2,13": 0, "2,14": 0, "3,0": 0, "3,1": 0, "3,2": 2, "3,3": 2, "3,4": 2, "3,5": 2, "3,6": 2, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 1, "3,11": 1, "3,12": 1, "3,13": 0, "3,14": 0, "4,0": 0, "4,1": 0, "4,2": 2, "4,3": 2, "4,4": 2, "4,5": 2, "4,6": 2, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "4,14": 0, "5,0": 0, "5,1": 0, "5,2": 2, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 2, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "5,14": 0, "6,0": 0, "6,1": 0, "6,2": 2, "6,3": 2, "6,4": 2, "6,5": 2, "6,6": 2, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "6,14": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "7,14": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 3, "8,9": 3, "8,10": 3, "8,11": 3, "8,12": 3, "8,13": 3, "8,14": 3, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 3, "9,9": 3, "9,10": 3, "9,11": 3, "9,12": 3, "9,13": 3, "9,14": 3, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 3, "10,9": 3, "10,10": 3, "10,11": 3, "10,12": 3, "10,13": 3, "10,14": 3, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 3, "11,9": 3, "11,10": 3, "11,11": 3, "11,12": 3, "11,13": 3, "11,14": 3, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 3, "12,9": 3, "12,10": 3, "12,11": 3, "12,12": 3, "12,13": 3, "12,14": 3}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "0,13": 0, "0,14": 0, "1,0": 0, "1,1": 0, "1,2": 2, "1,3": 2, "1,4": 2, "1,5": 2, "1,6": 2, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 1, "1,11": 1, "1,12": 1, "1,13": 0, "1,14": 0, "2,0": 0, "2,1": 0, "2,2": 2, "2,3": 8, "2,4": 8, "2,5": 8, "2,6": 2, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 1, "2,11": 8, "2,12": 1, "2,13": 0, "2,14": 0, "3,0": 0, "3,1": 0, "3,2": 2, "3,3": 8, "3,4": 8, "3,5": 8, "3,6": 2, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 1, "3,11": 1, "3,12": 1, "3,13": 0, "3,14": 0, "4,0": 0, "4,1": 0, "4,2": 2, "4,3": 8, "4,4": 8, "4,5": 8, "4,6": 2, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "4,13": 0, "4,14": 0, "5,0": 0, "5,1": 0, "5,2": 2, "5,3": 8, "5,4": 8, "5,5": 8, "5,6": 2, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "5,13": 0, "5,14": 0, "6,0": 0, "6,1": 0, "6,2": 2, "6,3": 2, "6,4": 2, "6,5": 2, "6,6": 2, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "6,13": 0, "6,14": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "7,13": 0, "7,14": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 3, "8,9": 3, "8,10": 3, "8,11": 3, "8,12": 3, "8,13": 3, "8,14": 3, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 3, "9,9": 8, "9,10": 8, "9,11": 8, "9,12": 8, "9,13": 8, "9,14": 3, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 3, "10,9": 8, "10,10": 8, "10,11": 8, "10,12": 8, "10,13": 8, "10,14": 3, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 3, "11,9": 8, "11,10": 8, "11,11": 8, "11,12": 8, "11,13": 8, "11,14": 3, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 3, "12,9": 3, "12,10": 3, "12,11": 3, "12,12": 3, "12,13": 3, "12,14": 3}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "1,0": 0, "1,1": 2, "1,2": 2, "1,3": 2, "1,4": 2, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "2,0": 0, "2,1": 2, "2,2": 2, "2,3": 2, "2,4": 2, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "3,0": 0, "3,1": 2, "3,2": 2, "3,3": 2, "3,4": 2, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "4,0": 0, "4,1": 2, "4,2": 2, "4,3": 2, "4,4": 2, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "7,0": 0, "7,1": 0, "7,2": 1, "7,3": 1, "7,4": 1, "7,5": 1, "7,6": 1, "7,7": 1, "7,8": 0, "7,9": 0, "7,10": 0, "8,0": 0, "8,1": 0, "8,2": 1, "8,3": 1, "8,4": 1, "8,5": 1, "8,6": 1, "8,7": 1, "8,8": 0, "8,9": 0, "8,10": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 1, "9,4": 1, "9,5": 1, "9,6": 1, "9,7": 1, "9,8": 0, "9,9": 0, "9,10": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "1,0": 0, "1,1": 2, "1,2": 2, "1,3": 2, "1,4": 2, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "2,0": 0, "2,1": 2, "2,2": 8, "2,3": 8, "2,4": 2, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "3,0": 0, "3,1": 2, "3,2": 8, "3,3": 8, "3,4": 2, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "4,0": 0, "4,1": 2, "4,2": 2, "4,3": 2, "4,4": 2, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "7,0": 0, "7,1": 0, "7,2": 1, "7,3": 1, "7,4": 1, "7,5": 1, "7,6": 1, "7,7": 1, "7,8": 0, "7,9": 0, "7,10": 0, "8,0": 0, "8,1": 0, "8,2": 1, "8,3": 8, "8,4": 8, "8,5": 8, "8,6": 8, "8,7": 1, "8,8": 0, "8,9": 0, "8,10": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 1, "9,4": 1, "9,5": 1, "9,6": 1, "9,7": 1, "9,8": 0, "9,9": 0, "9,10": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 2, "1,7": 2, "1,8": 2, "1,9": 2, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 3, "2,1": 3, "2,2": 3, "2,3": 3, "2,4": 0, "2,5": 0, "2,6": 2, "2,7": 2, "2,8": 2, "2,9": 2, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 3, "3,1": 3, "3,2": 3, "3,3": 3, "3,4": 0, "3,5": 0, "3,6": 2, "3,7": 2, "3,8": 2, "3,9": 2, "3,10": 0, "3,11": 0, "3,12": 0, "4,0": 3, "4,1": 3, "4,2": 3, "4,3": 3, "4,4": 0, "4,5": 0, "4,6": 2, "4,7": 2, "4,8": 2, "4,9": 2, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 3, "5,1": 3, "5,2": 3, "5,3": 3, "5,4": 0, "5,5": 0, "5,6": 2, "5,7": 2, "5,8": 2, "5,9": 2, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 2, "6,7": 2, "6,8": 2, "6,9": 2, "6,10": 0, "6,11": 0, "6,12": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "8,0": 0, "8,1": 0, "8,2": 1, "8,3": 1, "8,4": 1, "8,5": 1, "8,6": 1, "8,7": 1, "8,8": 1, "8,9": 1, "8,10": 0, "8,11": 0, "8,12": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 1, "9,4": 1, "9,5": 1, "9,6": 1, "9,7": 1, "9,8": 1, "9,9": 1, "9,10": 0, "9,11": 0, "9,12": 0, "10,0": 0, "10,1": 0, "10,2": 1, "10,3": 1, "10,4": 1, "10,5": 1, "10,6": 1, "10,7": 1, "10,8": 1, "10,9": 1, "10,10": 0, "10,11": 0, "10,12": 0, "11,0": 0, "11,1": 0, "11,2": 1, "11,3": 1, "11,4": 1, "11,5": 1, "11,6": 1, "11,7": 1, "11,8": 1, "11,9": 1, "11,10": 0, "11,11": 0, "11,12": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 2, "1,7": 2, "1,8": 2, "1,9": 2, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 3, "2,1": 3, "2,2": 3, "2,3": 3, "2,4": 0, "2,5": 0, "2,6": 2, "2,7": 8, "2,8": 8, "2,9": 2, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 3, "3,1": 8, "3,2": 8, "3,3": 3, "3,4": 0, "3,5": 0, "3,6": 2, "3,7": 8, "3,8": 8, "3,9": 2, "3,10": 0, "3,11": 0, "3,12": 0, "4,0": 3, "4,1": 8, "4,2": 8, "4,3": 3, "4,4": 0, "4,5": 0, "4,6": 2, "4,7": 8, "4,8": 8, "4,9": 2, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 3, "5,1": 3, "5,2": 3, "5,3": 3, "5,4": 0, "5,5": 0, "5,6": 2, "5,7": 8, "5,8": 8, "5,9": 2, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 2, "6,7": 2, "6,8": 2, "6,9": 2, "6,10": 0, "6,11": 0, "6,12": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "8,0": 0, "8,1": 0, "8,2": 1, "8,3": 1, "8,4": 1, "8,5": 1, "8,6": 1, "8,7": 1, "8,8": 1, "8,9": 1, "8,10": 0, "8,11": 0, "8,12": 0, "9,0": 0, "9,1": 0, "9,2": 1, "9,3": 8, "9,4": 8, "9,5": 8, "9,6": 8, "9,7": 8, "9,8": 8, "9,9": 1, "9,10": 0, "9,11": 0, "9,12": 0, "10,0": 0, "10,1": 0, "10,2": 1, "10,3": 8, "10,4": 8, "10,5": 8, "10,6": 8, "10,7": 8, "10,8": 8, "10,9": 1, "10,10": 0, "10,11": 0, "10,12": 0, "11,0": 0, "11,1": 0, "11,2": 1, "11,3": 1, "11,4": 1, "11,5": 1, "11,6": 1, "11,7": 1, "11,8": 1, "11,9": 1, "11,10": 0, "11,11": 0, "11,12": 0}}}], "name": "50cb2852.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (negate_boolean true)) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (negate_boolean true)) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) true) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) true) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_tile (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true))))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (is_tile (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) false))))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_east)))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_east)))) (lambda true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south)))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south)))) (lambda true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north)))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north)))) (lambda true))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) east)))) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) east)))) (lambda true))) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) false))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) grey) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) grey) false))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) red) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) red) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 7))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 7))) true) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) teal) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) teal) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) false)) 6))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) false)) 6))) true) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) (negate_boolean false)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) black) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) black) false))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) pink) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) pink) false))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) invisible) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) invisible) false))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) maroon) true))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) maroon) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) true)))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) true)))) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 7))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 7))) true) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) red) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) red) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) false)) 6))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) false)) 6))) true) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) maroon) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) maroon) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) grey) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) grey) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) invisible) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) invisible) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) teal) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) teal) (negate_boolean false)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) pink) (negate_boolean true)))", "(lambda (to_min_grid (remove_color (singleton_block (filter_blocks (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda true))) (lambda true)) (lambda true))) pink) (negate_boolean false)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_west (lambda true)))) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda true)))) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (negate_boolean (negate_boolean true))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda (touches_any_boundary (grid_to_block $1)))))) true))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda (touches_any_boundary (grid_to_block $1)))))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) false)))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) false)))) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda $0))) true))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda $0))) false))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) north)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) south)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) west)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) east)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) north_east)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) north_west)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) south_east)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) east (lambda true)))) (touches_boundary (grid_to_block $0) south_west)))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 6))) (touches_any_boundary (grid_to_block $0))) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $1)) (lambda true))) 6))) (touches_any_boundary (grid_to_block $0))) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) invisible)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) black)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) blue)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) red)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) green)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) yellow)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) grey)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) pink)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) orange)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) teal)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) south_west)))) (lambda true))) (has_color (box_block (grid_to_block $0)) maroon)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda (touches_any_boundary (grid_to_block $1)))))) (negate_boolean true)))", "(lambda (to_original_grid_overlay (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) (touches_any_boundary (extend_towards_until (block_to_tile (grid_to_block $0)) south_east (lambda (touches_any_boundary (grid_to_block $1)))))) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 7))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 7))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 3))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 3))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 9))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 9))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 1))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 1))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 1))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 1))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 6))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 6))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 0))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_inferred_b $1 (tile_overlaps_block $0 (box_block (grid_to_block $1))) false)) 0))) true) false))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 7))) true) true))", "(lambda (to_min_grid (merge_blocks (map_tiles (find_tiles_by_black_b $0) (lambda (grow (singleton_block (find_blocks_by_black_b $1 (touches_any_boundary (grid_to_block $1)) (touches_any_boundary (tile_to_block $0)))) 7))) true) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) false)))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) false)))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda $0))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (filter_tiles (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true)) (lambda true))) (lambda $0))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) true)))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) true)))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (touches_boundary (tile_to_block $0) north_east)))) (lambda (is_exterior (get_block_center $0) (negate_boolean true))))) true))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 3, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 4, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 3, "1,2": 3, "1,3": 3, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 4, "1,10": 8, "1,11": 4, "1,12": 0, "2,0": 0, "2,1": 3, "2,2": 3, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 4, "2,11": 0, "2,12": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 2, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 2, "5,5": 2, "5,6": 2, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 2, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 6, "9,10": 6, "9,11": 0, "9,12": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 6, "10,9": 0, "10,10": 6, "10,11": 0, "10,12": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 6, "11,9": 6, "11,10": 6, "11,11": 0, "11,12": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0}}], "output": {"grid": {"0,0": 0, "0,1": 4, "0,2": 0, "1,0": 4, "1,1": 4, "1,2": 4, "2,0": 0, "2,1": 4, "2,2": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 2, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 2, "1,8": 2, "1,9": 2, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 2, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "3,10": 0, "3,11": 0, "3,12": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 3, "4,4": 3, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 0, "5,1": 0, "5,2": 3, "5,3": 8, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 3, "6,4": 3, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 1, "8,8": 0, "8,9": 1, "8,10": 0, "8,11": 0, "8,12": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 1, "9,8": 1, "9,9": 1, "9,10": 0, "9,11": 0, "9,12": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 0, "10,5": 0, "10,6": 0, "10,7": 1, "10,8": 1, "10,9": 1, "10,10": 0, "10,11": 0, "10,12": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0, "11,11": 0, "11,12": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0}}], "output": {"grid": {"0,0": 0, "0,1": 3, "0,2": 3, "1,0": 3, "1,1": 3, "1,2": 0, "2,0": 0, "2,1": 3, "2,2": 3}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 0, "2,1": 2, "2,2": 2, "2,3": 2, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 0, "3,1": 0, "3,2": 8, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 3, "3,9": 0, "3,10": 3, "3,11": 0, "3,12": 0, "4,0": 0, "4,1": 2, "4,2": 2, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 3, "4,9": 3, "4,10": 3, "4,11": 0, "4,12": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 3, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "7,10": 0, "7,11": 0, "7,12": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 1, "8,4": 0, "8,5": 1, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "8,10": 0, "8,11": 0, "8,12": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 1, "9,4": 1, "9,5": 1, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0, "9,10": 0, "9,11": 0, "9,12": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 1, "10,5": 0, "10,6": 0, "10,7": 0, "10,8": 0, "10,9": 0, "10,10": 0, "10,11": 0, "10,12": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "11,7": 0, "11,8": 0, "11,9": 0, "11,10": 0, "11,11": 0, "11,12": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 0, "12,5": 0, "12,6": 0, "12,7": 0, "12,8": 0, "12,9": 0, "12,10": 0, "12,11": 0, "12,12": 0}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "1,0": 0, "1,1": 2, "1,2": 0, "2,0": 2, "2,1": 2, "2,2": 0}}}], "name": "5117e062.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_min_grid (fill_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue) true))", "(lambda (to_min_grid (fill_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) true))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean (negate_boolean false))))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (grid_to_block $0)))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (grid_to_block $0)))))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) red) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) grey) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) grey) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) grey) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) grey) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) red) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) red) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) black) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) black) false))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (grid_to_block $0)))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (grid_to_block $0)))))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) invisible) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) invisible) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) teal) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) teal) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) blue) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) blue) false))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))))) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) red) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) red) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) grey) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) grey) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) teal) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) teal) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) black) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) black) false))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (remove_black_b (grid_to_block $0))))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (remove_black_b (grid_to_block $0))))))) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) pink) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) pink) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) invisible) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) invisible) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) grey) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) grey) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) grey) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) grey) (negate_boolean false)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (find_blocks_by_black_b $0 false false) (lambda true))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (find_blocks_by_black_b $0 false false) (lambda true))))) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) red) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) red) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 6) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 6) true) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 4) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 4) true) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 3) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (tile_overlaps_block (block_to_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))) $0))) (lambda 3) true) false))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (grid_to_block $0)))))) (negate_boolean true)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_inferred_b $0 false (touches_any_boundary (grid_to_block $0)))))) (negate_boolean false)))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) red) (negate_boolean true)))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) red) (negate_boolean false)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))))) (negate_boolean true)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))))) (negate_boolean false)))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) teal) (negate_boolean true)))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda true))) teal) (negate_boolean false)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (grid_to_block $0)))))) (negate_boolean true)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (grid_to_block $0)))))) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) red) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) red) (negate_boolean false)))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) teal) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean true)))) teal) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) black) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 0))))) black) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) red) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) red) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) blue) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 6))))) blue) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) teal) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 5))))) teal) (negate_boolean false)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) invisible) (negate_boolean true)))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (has_min_tiles (tile_to_block (block_to_tile (grid_to_block $1))) 7))))) invisible) (negate_boolean false)))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))))))) true))", "(lambda (to_min_grid (center_block_on_tile (fill_color (tile_to_block (get_block_center (grid_to_block $0))) blue) (block_to_tile (singleton_block (find_blocks_by_black_b $0 false (touches_any_boundary (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))))))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) pink) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) pink) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) invisible)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) blue)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) green)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) yellow)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) pink)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) orange)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) teal)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) false))))) (has_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) maroon)))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) (tile_overlaps_block $0 (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))))))))) true))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) (tile_overlaps_block $0 (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1))))))))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) grey) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) grey) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean (negate_boolean true))))) maroon) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (negate_boolean (negate_boolean true))))) maroon) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (touches_any_boundary (grid_to_block $1))))) pink) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (touches_any_boundary (grid_to_block $1))))) pink) false))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (is_rectangle (grow (fill_color (grow (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) 9) grey) 4) false)) true))", "(lambda (to_min_grid (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (is_rectangle (grow (fill_color (grow (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) true) 9) grey) 4) false)) false))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (touches_any_boundary (grid_to_block $1))))) invisible) true))", "(lambda (to_min_grid (fill_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda (tile_overlaps_block $0 (grid_to_block $1))))) (lambda (touches_any_boundary (grid_to_block $1))))) invisible) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) grey) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) grey) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (singleton_block (tiles_to_blocks (find_tiles_by_black_b $1)))))))) red) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (tile_overlaps_block (get_block_center (grid_to_block $1)) (grow (grid_to_block $1) 6)))))) red) false))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grow (filter_block_tiles (merge_blocks (find_blocks_by_inferred_b $1 false false) true) (lambda true)) 6)))) true))", "(lambda (to_min_grid (singleton_block (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (grow (filter_block_tiles (merge_blocks (find_blocks_by_inferred_b $1 false false) true) (lambda true)) 6)))) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) (touches_any_boundary (move_towards_until $0 south_east (lambda true)))))))) true))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) (touches_any_boundary (move_towards_until $0 south_east (lambda true)))))))) false))", "(lambda (to_min_grid (singleton_block (map_tiles (find_tiles_by_black_b $0) (lambda (singleton_block (find_blocks_by_inferred_b $1 (is_interior $0 true) (touches_any_boundary (move_towards_until $0 north (lambda true)))))))) true))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 2, "2,1": 2, "2,2": 2, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 2, "3,1": 3, "3,2": 2, "3,3": 3, "3,4": 0, "3,5": 3, "3,6": 0, "3,7": 3, "3,8": 0, "3,9": 3, "3,10": 0, "3,11": 3, "3,12": 0, "4,0": 2, "4,1": 2, "4,2": 2, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "0,10": 0, "0,11": 0, "0,12": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "1,10": 0, "1,11": 0, "1,12": 0, "2,0": 0, "2,1": 0, "2,2": 2, "2,3": 2, "2,4": 2, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "2,10": 0, "2,11": 0, "2,12": 0, "3,0": 0, "3,1": 3, "3,2": 2, "3,3": 3, "3,4": 2, "3,5": 3, "3,6": 0, "3,7": 3, "3,8": 0, "3,9": 3, "3,10": 0, "3,11": 3, "3,12": 0, "4,0": 0, "4,1": 0, "4,2": 2, "4,3": 2, "4,4": 2, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "4,10": 0, "4,11": 0, "4,12": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "5,10": 0, "5,11": 0, "5,12": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "6,10": 0, "6,11": 0, "6,12": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 3, "0,5": 0, "0,6": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 3, "2,5": 0, "2,6": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 2, "3,4": 2, "3,5": 2, "3,6": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 2, "4,4": 3, "4,5": 2, "4,6": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 3, "6,5": 0, "6,6": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 3, "8,5": 0, "8,6": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 3, "10,5": 0, "10,6": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 3, "12,5": 0, "12,6": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 0, "0,3": 0, "0,4": 3, "0,5": 0, "0,6": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "2,0": 0, "2,1": 0, "2,2": 0, "2,3": 0, "2,4": 3, "2,5": 0, "2,6": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 3, "4,5": 0, "4,6": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 2, "6,4": 3, "6,5": 2, "6,6": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 2, "7,4": 2, "7,5": 2, "7,6": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 3, "8,5": 0, "8,6": 0, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "10,0": 0, "10,1": 0, "10,2": 0, "10,3": 0, "10,4": 3, "10,5": 0, "10,6": 0, "11,0": 0, "11,1": 0, "11,2": 0, "11,3": 0, "11,4": 0, "11,5": 0, "11,6": 0, "12,0": 0, "12,1": 0, "12,2": 0, "12,3": 0, "12,4": 3, "12,5": 0, "12,6": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 3, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "1,0": 0, "1,1": 2, "1,2": 2, "1,3": 2, "1,4": 0, "1,5": 0, "1,6": 0, "2,0": 0, "2,1": 2, "2,2": 3, "2,3": 2, "2,4": 0, "2,5": 0, "2,6": 0, "3,0": 0, "3,1": 2, "3,2": 2, "3,3": 2, "3,4": 0, "3,5": 0, "3,6": 0, "4,0": 0, "4,1": 0, "4,2": 3, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "6,0": 0, "6,1": 0, "6,2": 3, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 3, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "1,0": 0, "1,1": 0, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "2,0": 0, "2,1": 0, "2,2": 3, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "3,0": 0, "3,1": 2, "3,2": 2, "3,3": 2, "3,4": 0, "3,5": 0, "3,6": 0, "4,0": 0, "4,1": 2, "4,2": 3, "4,3": 2, "4,4": 0, "4,5": 0, "4,6": 0, "5,0": 0, "5,1": 2, "5,2": 2, "5,3": 2, "5,4": 0, "5,5": 0, "5,6": 0, "6,0": 0, "6,1": 0, "6,2": 3, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0}}}], "name": "5168d44c.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_min_grid (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 9) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 9) true) false))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))) true))", "(lambda (to_min_grid (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda true))) false))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda $0)) false true))", "(lambda (blocks_to_original_grid (map_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda $0)) false false))", "(lambda (to_min_grid (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 9) true) (negate_boolean true)))", "(lambda (to_min_grid (first_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 9) true) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda true)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda true)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda false)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda false)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean true))))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean false))))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange true) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange true) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda true)))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean true))))) (lambda true)))) (negate_boolean false)))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) red false) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) red false) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean (negate_boolean true)))))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean (negate_boolean false)))))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 false))))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 false))))) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) invisible false) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) invisible false) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible false) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible false) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange false) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange false) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) pink false) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) pink false) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue green) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue green) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange (negate_boolean true)) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 false false)) false))) orange (negate_boolean true)) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green black) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green black) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green red) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green red) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red red) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red red) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue blue) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue blue) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green pink) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green pink) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red orange) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))) (lambda true)))) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red pink) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red pink) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible green) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible green) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange red) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange red) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible red) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible red) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green orange) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink orange) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange orange) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible orange) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue orange) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue orange) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 (negate_boolean true)))))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 (negate_boolean true)))))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))) (lambda false)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))) (lambda false)))) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange teal) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange teal) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible (negate_boolean true)) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible (negate_boolean true)) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) red (negate_boolean true)) true))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) red (negate_boolean true)) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) green invisible) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink invisible) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) red invisible) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) orange invisible) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible invisible) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible pink) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) invisible pink) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue invisible) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue invisible) false))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible false) (negate_boolean true)))", "(lambda (to_original_grid_overlay (wrap_block (singleton_block (find_same_color_blocks $0 (negate_boolean false) (is_symmetrical (singleton_block (find_blocks_by_black_b $0 true false)) false))) invisible false) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean true))))))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 false))) (lambda true)))) (negate_boolean (negate_boolean (negate_boolean (negate_boolean false))))))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 false))))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 false))))) (negate_boolean false)))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink red) true))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) pink red) false))", "(lambda (to_min_grid (fill_color (remove_black_b (center_block_on_tile (map_block_tiles (extend_towards_until (block_to_tile (grid_to_block $0)) south (lambda true)) (lambda $0)) (block_to_tile (grid_to_block $0)))) pink) true))", "(lambda (to_min_grid (fill_color (remove_black_b (center_block_on_tile (map_block_tiles (extend_towards_until (block_to_tile (grid_to_block $0)) south (lambda true)) (lambda $0)) (block_to_tile (grid_to_block $0)))) pink) false))", "(lambda (to_min_grid (fill_color (remove_black_b (center_block_on_tile (map_block_tiles (extend_towards_until (block_to_tile (grid_to_block $0)) south (lambda true)) (lambda $0)) (block_to_tile (grid_to_block $0)))) invisible) true))", "(lambda (to_min_grid (fill_color (remove_black_b (center_block_on_tile (map_block_tiles (extend_towards_until (block_to_tile (grid_to_block $0)) south (lambda true)) (lambda $0)) (block_to_tile (grid_to_block $0)))) invisible) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (extend_towards_until $0 east (lambda true))) false))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (extend_towards_until $0 east (lambda true))) false))) (lambda true)))) false))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue invisible) (negate_boolean true)))", "(lambda (to_min_grid (replace_color (singleton_block (filter_blocks (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda true)) (lambda true))) (lambda true))) blue invisible) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (is_exterior $0 (has_color (tile_to_block $0) maroon))))) (lambda false)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (is_exterior $0 (has_color (tile_to_block $0) maroon))))) (lambda false)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (move_towards_until $0 south_west (lambda true))) false))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (move_towards_until $0 south_west (lambda true))) false))) (lambda true)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 (negate_boolean true)))))) (negate_boolean true)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior $0 (negate_boolean true)))) (lambda (is_exterior $0 (negate_boolean true)))))) (negate_boolean false)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (extend_towards_until $0 north_east (lambda true))) false))) (lambda true)))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (filter_tiles (filter_tiles (find_tiles_by_black_b $0) (lambda (is_exterior (get_block_center (extend_towards_until $0 north_east (lambda true))) false))) (lambda true)))) false))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "0,3": 3, "0,4": 0, "1,0": 2, "1,1": 2, "1,2": 2, "1,3": 3, "1,4": 0, "2,0": 2, "2,1": 2, "2,2": 2, "2,3": 3, "2,4": 0, "3,0": 3, "3,1": 3, "3,2": 3, "3,3": 3, "3,4": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "0,3": 3, "0,4": 2, "0,5": 2, "0,6": 2, "0,7": 3, "0,8": 2, "0,9": 2, "1,0": 2, "1,1": 2, "1,2": 2, "1,3": 3, "1,4": 2, "1,5": 2, "1,6": 2, "1,7": 3, "1,8": 2, "1,9": 2, "2,0": 2, "2,1": 2, "2,2": 2, "2,3": 3, "2,4": 2, "2,5": 2, "2,6": 2, "2,7": 3, "2,8": 2, "2,9": 2, "3,0": 3, "3,1": 3, "3,2": 3, "3,3": 3, "3,4": 2, "3,5": 2, "3,6": 2, "3,7": 3, "3,8": 2, "3,9": 2, "4,0": 2, "4,1": 2, "4,2": 2, "4,3": 2, "4,4": 2, "4,5": 2, "4,6": 2, "4,7": 3, "4,8": 2, "4,9": 2, "5,0": 2, "5,1": 2, "5,2": 2, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 2, "5,7": 3, "5,8": 2, "5,9": 2, "6,0": 2, "6,1": 2, "6,2": 2, "6,3": 2, "6,4": 2, "6,5": 2, "6,6": 2, "6,7": 3, "6,8": 2, "6,9": 2, "7,0": 3, "7,1": 3, "7,2": 3, "7,3": 3, "7,4": 3, "7,5": 3, "7,6": 3, "7,7": 3, "7,8": 2, "7,9": 2, "8,0": 2, "8,1": 2, "8,2": 2, "8,3": 2, "8,4": 2, "8,5": 2, "8,6": 2, "8,7": 2, "8,8": 2, "8,9": 2, "9,0": 2, "9,1": 2, "9,2": 2, "9,3": 2, "9,4": 2, "9,5": 2, "9,6": 2, "9,7": 2, "9,8": 2, "9,9": 2}}}, {"inputs": [{"grid": {"0,0": 1, "0,1": 1, "0,2": 4, "0,3": 6, "0,4": 0, "1,0": 1, "1,1": 1, "1,2": 4, "1,3": 6, "1,4": 0, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 6, "2,4": 0, "3,0": 6, "3,1": 6, "3,2": 6, "3,3": 6, "3,4": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 0}}], "output": {"grid": {"0,0": 1, "0,1": 1, "0,2": 4, "0,3": 6, "0,4": 1, "0,5": 1, "0,6": 4, "0,7": 6, "0,8": 1, "0,9": 1, "1,0": 1, "1,1": 1, "1,2": 4, "1,3": 6, "1,4": 1, "1,5": 1, "1,6": 4, "1,7": 6, "1,8": 1, "1,9": 1, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 6, "2,4": 1, "2,5": 1, "2,6": 4, "2,7": 6, "2,8": 1, "2,9": 1, "3,0": 6, "3,1": 6, "3,2": 6, "3,3": 6, "3,4": 1, "3,5": 1, "3,6": 4, "3,7": 6, "3,8": 1, "3,9": 1, "4,0": 1, "4,1": 1, "4,2": 1, "4,3": 1, "4,4": 1, "4,5": 1, "4,6": 4, "4,7": 6, "4,8": 1, "4,9": 1, "5,0": 1, "5,1": 1, "5,2": 1, "5,3": 1, "5,4": 1, "5,5": 1, "5,6": 4, "5,7": 6, "5,8": 1, "5,9": 1, "6,0": 4, "6,1": 4, "6,2": 4, "6,3": 4, "6,4": 4, "6,5": 4, "6,6": 4, "6,7": 6, "6,8": 1, "6,9": 1, "7,0": 6, "7,1": 6, "7,2": 6, "7,3": 6, "7,4": 6, "7,5": 6, "7,6": 6, "7,7": 6, "7,8": 1, "7,9": 1, "8,0": 1, "8,1": 1, "8,2": 1, "8,3": 1, "8,4": 1, "8,5": 1, "8,6": 1, "8,7": 1, "8,8": 1, "8,9": 1, "9,0": 1, "9,1": 1, "9,2": 1, "9,3": 1, "9,4": 1, "9,5": 1, "9,6": 1, "9,7": 1, "9,8": 1, "9,9": 1}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 3, "0,2": 4, "0,3": 1, "0,4": 6, "1,0": 3, "1,1": 3, "1,2": 4, "1,3": 1, "1,4": 6, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 1, "2,4": 6, "3,0": 1, "3,1": 1, "3,2": 1, "3,3": 1, "3,4": 6, "4,0": 6, "4,1": 6, "4,2": 6, "4,3": 6, "4,4": 6}}], "output": {"grid": {"0,0": 2, "0,1": 3, "0,2": 4, "0,3": 1, "0,4": 6, "0,5": 2, "0,6": 3, "0,7": 4, "0,8": 1, "0,9": 6, "1,0": 3, "1,1": 3, "1,2": 4, "1,3": 1, "1,4": 6, "1,5": 2, "1,6": 3, "1,7": 4, "1,8": 1, "1,9": 6, "2,0": 4, "2,1": 4, "2,2": 4, "2,3": 1, "2,4": 6, "2,5": 2, "2,6": 3, "2,7": 4, "2,8": 1, "2,9": 6, "3,0": 1, "3,1": 1, "3,2": 1, "3,3": 1, "3,4": 6, "3,5": 2, "3,6": 3, "3,7": 4, "3,8": 1, "3,9": 6, "4,0": 6, "4,1": 6, "4,2": 6, "4,3": 6, "4,4": 6, "4,5": 2, "4,6": 3, "4,7": 4, "4,8": 1, "4,9": 6, "5,0": 2, "5,1": 2, "5,2": 2, "5,3": 2, "5,4": 2, "5,5": 2, "5,6": 3, "5,7": 4, "5,8": 1, "5,9": 6, "6,0": 3, "6,1": 3, "6,2": 3, "6,3": 3, "6,4": 3, "6,5": 3, "6,6": 3, "6,7": 4, "6,8": 1, "6,9": 6, "7,0": 4, "7,1": 4, "7,2": 4, "7,3": 4, "7,4": 4, "7,5": 4, "7,6": 4, "7,7": 4, "7,8": 1, "7,9": 6, "8,0": 1, "8,1": 1, "8,2": 1, "8,3": 1, "8,4": 1, "8,5": 1, "8,6": 1, "8,7": 1, "8,8": 1, "8,9": 6, "9,0": 6, "9,1": 6, "9,2": 6, "9,3": 6, "9,4": 6, "9,5": 6, "9,6": 6, "9,7": 6, "9,8": 6, "9,9": 6}}}], "name": "539a4f51.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda false)))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (filter_tiles (find_tiles_by_black_b $0) (lambda false)))) false))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) invisible)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) black)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) blue)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) red)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) green)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) yellow)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) grey)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) pink)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) orange)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) teal)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black pink) maroon)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) invisible)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) black)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) blue)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) red)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) green)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) yellow)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) grey)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) pink)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) orange)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) teal)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black red) maroon)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) invisible)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) black)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) blue)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) red)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) green)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) yellow)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) grey)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) pink)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) orange)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) teal)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black orange) maroon)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) invisible)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) black)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) blue)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) red)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) green)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) yellow)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) grey)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) pink)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) orange)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) teal)))", "(lambda (to_min_grid (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) (has_color (replace_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) black invisible) maroon)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) false) true))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) false) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_west)))) true) true))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_west)))) true) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) north_east)))) false) true))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) north_east)))) false) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) true) true))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) true) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_east)))) true) true))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_east)))) true) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink grey) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink grey) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) invisible red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) invisible red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink red) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink red) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey maroon) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey maroon) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) invisible pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) invisible pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green pink) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue pink) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue pink) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) true) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) north_east)))) false) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) north_east)))) false) (negate_boolean false)))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green orange) false))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) false) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south)))) false) (negate_boolean false)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_east)))) true) (negate_boolean true)))", "(lambda (to_min_grid (merge_blocks (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (negate_boolean (touches_boundary (reflect (grid_to_block $1) true) south_east)))) true) (negate_boolean false)))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green invisible) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) green invisible) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink blue) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink blue) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) grey orange) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green orange) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) pink orange) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) pink orange) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue orange) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) blue orange) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red invisible) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 1) true) red invisible) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible invisible) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) invisible invisible) false))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green invisible) true))", "(lambda (to_min_grid (replace_color (first_of_sorted_object_list (find_same_color_blocks $0 false (is_tile (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))))) (lambda 3) true) green invisible) false))"]}, {"examples": [{"inputs": [{"grid": {"0,0": 1, "0,1": 1, "0,2": 1, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 0, "1,2": 1, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 0, "2,1": 0, "2,2": 1, "2,3": 1, "2,4": 1, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 1, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 1, "4,5": 1, "4,6": 1, "4,7": 0, "4,8": 0, "4,9": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 1, "5,7": 0, "5,8": 0, "5,9": 0}}], "output": {"grid": {"0,0": 1, "0,1": 1, "0,2": 1, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 0, "1,2": 1, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 0, "2,1": 0, "2,2": 1, "2,3": 1, "2,4": 1, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 0, "3,2": 0, "3,3": 0, "3,4": 1, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 0, "4,2": 0, "4,3": 0, "4,4": 1, "4,5": 1, "4,6": 1, "4,7": 0, "4,8": 0, "4,9": 0, "5,0": 0, "5,1": 0, "5,2": 0, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 1, "5,7": 0, "5,8": 0, "5,9": 0, "6,0": 0, "6,1": 0, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 1, "6,7": 1, "6,8": 1, "6,9": 0, "7,0": 0, "7,1": 0, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 1, "7,9": 0, "8,0": 0, "8,1": 0, "8,2": 0, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 1, "8,9": 1, "9,0": 0, "9,1": 0, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 3, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 0, "1,2": 3, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 0, "2,1": 0, "2,2": 3, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 0, "3,2": 3, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 0, "4,2": 3, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0}}], "output": {"grid": {"0,0": 0, "0,1": 0, "0,2": 3, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 0, "1,2": 3, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 0, "2,1": 0, "2,2": 3, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 0, "3,2": 3, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 0, "4,2": 3, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "5,0": 0, "5,1": 0, "5,2": 3, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "6,0": 0, "6,1": 0, "6,2": 3, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "7,0": 0, "7,1": 0, "7,2": 3, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "8,0": 0, "8,1": 0, "8,2": 3, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "9,0": 0, "9,1": 0, "9,2": 3, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 2, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 2, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 2, "2,1": 0, "2,2": 2, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 2, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 2, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "5,0": 2, "5,1": 0, "5,2": 2, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "6,0": 0, "6,1": 2, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "7,0": 0, "7,1": 2, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0}}], "output": {"grid": {"0,0": 0, "0,1": 2, "0,2": 0, "0,3": 0, "0,4": 0, "0,5": 0, "0,6": 0, "0,7": 0, "0,8": 0, "0,9": 0, "1,0": 0, "1,1": 2, "1,2": 0, "1,3": 0, "1,4": 0, "1,5": 0, "1,6": 0, "1,7": 0, "1,8": 0, "1,9": 0, "2,0": 2, "2,1": 0, "2,2": 2, "2,3": 0, "2,4": 0, "2,5": 0, "2,6": 0, "2,7": 0, "2,8": 0, "2,9": 0, "3,0": 0, "3,1": 2, "3,2": 0, "3,3": 0, "3,4": 0, "3,5": 0, "3,6": 0, "3,7": 0, "3,8": 0, "3,9": 0, "4,0": 0, "4,1": 2, "4,2": 0, "4,3": 0, "4,4": 0, "4,5": 0, "4,6": 0, "4,7": 0, "4,8": 0, "4,9": 0, "5,0": 2, "5,1": 0, "5,2": 2, "5,3": 0, "5,4": 0, "5,5": 0, "5,6": 0, "5,7": 0, "5,8": 0, "5,9": 0, "6,0": 0, "6,1": 2, "6,2": 0, "6,3": 0, "6,4": 0, "6,5": 0, "6,6": 0, "6,7": 0, "6,8": 0, "6,9": 0, "7,0": 0, "7,1": 2, "7,2": 0, "7,3": 0, "7,4": 0, "7,5": 0, "7,6": 0, "7,7": 0, "7,8": 0, "7,9": 0, "8,0": 2, "8,1": 0, "8,2": 2, "8,3": 0, "8,4": 0, "8,5": 0, "8,6": 0, "8,7": 0, "8,8": 0, "8,9": 0, "9,0": 0, "9,1": 2, "9,2": 0, "9,3": 0, "9,4": 0, "9,5": 0, "9,6": 0, "9,7": 0, "9,8": 0, "9,9": 0}}}], "name": "53b68214.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_original_grid_overlay (grid_to_block $0) true))", "(lambda (to_original_grid_overlay (grid_to_block $0) false))", "(lambda (to_original_grid_overlay (duplicate (grid_to_block $0) south 2) true))", "(lambda (to_original_grid_overlay (duplicate (grid_to_block $0) south 2) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south)))) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 north_east)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 north_east)))) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south_west)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south_west)))) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 north)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 north)))) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south_east)))) true))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south_east)))) false))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (has_min_tiles $0 0)))) red) true))", "(lambda (to_original_grid_overlay (remove_color (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (has_min_tiles $0 0)))) red) false))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south)))) (is_symmetrical (remove_black_b (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) true)))", "(lambda (to_original_grid_overlay (singleton_block (filter_blocks (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda (touches_boundary $0 south)))) (is_symmetrical (remove_black_b (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0)))) false)))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) red) maroon) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) red) maroon) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) grey)) (lambda true)) black) orange) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) grey)) (lambda true)) black) orange) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) yellow) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) yellow) pink) false))", "(lambda (to_original_grid_overlay (reflect (tile_to_block (get_block_center (replace_color (remove_color (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey) red) green orange))) false) true))", "(lambda (to_original_grid_overlay (reflect (tile_to_block (get_block_center (replace_color (remove_color (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) grey) red) green orange))) false) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) yellow) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) yellow) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (reflect (tile_to_block (get_block_center (replace_color (remove_color (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red) red) orange red))) true) true))", "(lambda (to_original_grid_overlay (reflect (tile_to_block (get_block_center (replace_color (remove_color (remove_color (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) red) red) orange red))) true) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) invisible) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) invisible) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) teal) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) teal) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) blue) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) red)) (lambda true)) invisible) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) red)) (lambda true)) invisible) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) yellow) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 3) grey)) (lambda true)) yellow) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) green) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) green) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) red) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) red) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) grey)) (lambda true)) pink) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) pink) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) pink) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) grey)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) grey)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) green) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) red)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) red)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) east 3) yellow)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) grey) maroon) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) grey) maroon) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) pink) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) blue)) (lambda true)) pink) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) invisible) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north_east 3) red)) (lambda true)) invisible) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) grey)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) orange) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_east 3) grey)) (lambda true)) grey) orange) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) red) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) grey) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) south_west 3) orange)) (lambda true)) grey) invisible) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) grey) pink) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 5) grey)) (lambda true)) grey) pink) false))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) red) invisible) true))", "(lambda (to_original_grid_overlay (fill_color (remove_color (filter_block_tiles (remove_black_b (remove_color (duplicate (grid_to_block $0) north 9) maroon)) (lambda true)) red) invisible) false))"]}], "programTimeout": 0.1}