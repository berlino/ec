{"tasks": [{"examples": [{"inputs": [{"grid": {"0,0": 6, "0,1": 6, "0,2": 6, "0,3": 2, "1,0": 6, "1,1": 1, "1,2": 6, "1,3": 2, "2,0": 7, "2,1": 2, "2,2": 7, "2,3": 2, "3,0": 1, "3,1": 7, "3,2": 2, "3,3": 2}}], "output": {"grid": {"0,0": 2, "0,1": 6, "0,2": 6, "0,3": 6, "1,0": 2, "1,1": 6, "1,2": 1, "1,3": 6, "2,0": 2, "2,1": 7, "2,2": 2, "2,3": 7, "3,0": 2, "3,1": 2, "3,2": 7, "3,3": 1}}}, {"inputs": [{"grid": {"0,0": 7, "0,1": 7, "0,2": 7, "0,3": 6, "0,4": 6, "0,5": 6, "0,6": 2, "1,0": 6, "1,1": 7, "1,2": 1, "1,3": 1, "1,4": 7, "1,5": 7, "1,6": 1, "2,0": 7, "2,1": 7, "2,2": 2, "2,3": 1, "2,4": 2, "2,5": 6, "2,6": 6, "3,0": 2, "3,1": 2, "3,2": 7, "3,3": 7, "3,4": 7, "3,5": 2, "3,6": 2, "4,0": 7, "4,1": 2, "4,2": 7, "4,3": 1, "4,4": 2, "4,5": 7, "4,6": 2, "5,0": 6, "5,1": 6, "5,2": 6, "5,3": 2, "5,4": 2, "5,5": 1, "5,6": 1, "6,0": 6, "6,1": 2, "6,2": 6, "6,3": 6, "6,4": 6, "6,5": 6, "6,6": 6}}], "output": {"grid": {"0,0": 2, "0,1": 6, "0,2": 6, "0,3": 6, "0,4": 7, "0,5": 7, "0,6": 7, "1,0": 1, "1,1": 7, "1,2": 7, "1,3": 1, "1,4": 1, "1,5": 7, "1,6": 6, "2,0": 6, "2,1": 6, "2,2": 2, "2,3": 1, "2,4": 2, "2,5": 7, "2,6": 7, "3,0": 2, "3,1": 2, "3,2": 7, "3,3": 7, "3,4": 7, "3,5": 2, "3,6": 2, "4,0": 2, "4,1": 7, "4,2": 2, "4,3": 1, "4,4": 7, "4,5": 2, "4,6": 7, "5,0": 1, "5,1": 1, "5,2": 2, "5,3": 2, "5,4": 6, "5,5": 6, "5,6": 6, "6,0": 6, "6,1": 6, "6,2": 6, "6,3": 6, "6,4": 6, "6,5": 2, "6,6": 6}}}, {"inputs": [{"grid": {"0,0": 1, "0,1": 2, "0,2": 7, "0,3": 1, "0,4": 1, "0,5": 1, "1,0": 2, "1,1": 1, "1,2": 7, "1,3": 7, "1,4": 2, "1,5": 6, "2,0": 2, "2,1": 1, "2,2": 2, "2,3": 6, "2,4": 2, "2,5": 1, "3,0": 1, "3,1": 2, "3,2": 1, "3,3": 7, "3,4": 6, "3,5": 2, "4,0": 2, "4,1": 7, "4,2": 1, "4,3": 2, "4,4": 7, "4,5": 1, "5,0": 2, "5,1": 1, "5,2": 6, "5,3": 2, "5,4": 7, "5,5": 7}}], "output": {"grid": {"0,0": 1, "0,1": 1, "0,2": 1, "0,3": 7, "0,4": 2, "0,5": 1, "1,0": 6, "1,1": 2, "1,2": 7, "1,3": 7, "1,4": 1, "1,5": 2, "2,0": 1, "2,1": 2, "2,2": 6, "2,3": 2, "2,4": 1, "2,5": 2, "3,0": 2, "3,1": 6, "3,2": 7, "3,3": 1, "3,4": 2, "3,5": 1, "4,0": 1, "4,1": 7, "4,2": 2, "4,3": 1, "4,4": 7, "4,5": 2, "5,0": 7, "5,1": 7, "5,2": 2, "5,3": 6, "5,4": 1, "5,5": 2}}}], "name": "67a3c6ac.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (to_min_grid (grid_to_block $0) true))", "(lambda (to_min_grid (grid_to_block $0) false))", "(lambda (to_min_grid (remove_black_b (grid_to_block $0)) true))", "(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) true))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) false))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) true))", "(lambda (to_original_grid_overlay (singleton_block (tiles_to_blocks (find_tiles_by_black_b $0))) false))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false false))", "(lambda (to_min_grid (map_block_tiles (grid_to_block $0) (lambda $0)) true))", "(lambda (to_min_grid (map_block_tiles (grid_to_block $0) (lambda $0)) false))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) north)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) south)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) west)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) north_east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) north_west)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) south_east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 8) south_west)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) north)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) south)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) west)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) north_east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) north_west)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) south_east)))", "(lambda (to_original_grid_overlay (box_block (grid_to_block $0)) (touches_boundary (grow (grid_to_block $0) 9) south_west)))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) maroon)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) maroon)) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (reflect (grid_to_block $1) false)))) true))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (reflect (grid_to_block $1) false)))) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) true)) false))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) true)) false))) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 9) false)) false))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 9) false)) false))) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 1) false)) false))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 1) false)) false))) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) teal)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) teal)) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) teal) false) false) teal)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) teal) false) false) teal)) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) yellow) false) false) teal)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) yellow) false) false) teal)) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) true) false) teal)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) true) false) teal)) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) true) false) green)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) true) false) green)) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) black)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (box_block (remove_black_b (grid_to_block $0))) false) false) black)) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (reflect (grid_to_block $1) true)))) true))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (reflect (grid_to_block $1) true)))) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) true))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 9) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 9) true) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 6) false) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 6) false) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 9) false) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda true)) (lambda 9) false) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda 9) false) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda 9) false) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda 9) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda 9) true) false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (reflect (reflect (reflect (box_block (grid_to_block $0)) false) false) false) false))) true))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (reflect (reflect (reflect (box_block (grid_to_block $0)) false) false) false) false))) false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 1) false) teal) true) false true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 1) false) teal) true) false false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) true) false true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) true) false false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) false) false true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) false) false false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) true) true true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) true) true false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 1) false) teal) true) true true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 1) false) teal) true) true false))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) north)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) south)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) west)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) east)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) north_east)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) north_west)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) south_east)))", "(lambda (to_original_grid_overlay (tile_to_block (get_block_center (reflect (remove_black_b (reflect (grow (grid_to_block $0) 4) false)) false))) (touches_boundary (grid_to_block $0) south_west)))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 7) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 7) false))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (find_blocks_by_black_b $0 true (is_tile (reflect (grid_to_block $0) false))) (lambda (grid_to_block $1))) true) true))", "(lambda (to_original_grid_overlay (merge_blocks (map_blocks (find_blocks_by_black_b $0 true (is_tile (reflect (grid_to_block $0) false))) (lambda (grid_to_block $1))) true) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda (get_height (grid_to_block $1))) true) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda (get_height (grid_to_block $1))) true) false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) (negate_boolean true)) false true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) (negate_boolean true)) false false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 9) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 9) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 true true) true) false) false) false) 9) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 true true) true) false) false) false) 9) false))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda (get_height (grid_to_block $1))) false) true))", "(lambda (to_min_grid (first_of_sorted_object_list (filter_blocks (find_blocks_by_color $0 teal true false) (lambda false)) (lambda (get_height (grid_to_block $1))) false) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 6) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 6) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 true true) true) false) false) false) 2) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 true true) true) false) false) false) 2) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 2) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 2) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 0) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false true) true) false) false) false) 0) false))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) (get_tile_color (block_to_tile (grid_to_block $0)))) false) false) maroon)) true))", "(lambda (to_min_grid (remove_black_b (remove_color (reflect (reflect (fill_color (grid_to_block $0) (get_tile_color (block_to_tile (grid_to_block $0)))) false) false) maroon)) false))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 0) true))", "(lambda (to_original_grid_overlay (grow (reflect (reflect (reflect (merge_blocks (find_blocks_by_inferred_b $0 false false) true) false) false) false) 0) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) invisible)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) black)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) blue)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) red)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) green)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) yellow)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) grey)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) pink)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) orange)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) teal)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (reflect $0 false) teal)))) (has_color (grid_to_block $0) maroon)))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (move (grid_to_block $1) 2 north false) teal)))) true))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (move (grid_to_block $1) 2 north false) teal)))) false))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) false) (touches_any_boundary (grid_to_block $0)) true))", "(lambda (blocks_to_original_grid (find_blocks_by_inferred_b $0 (has_color (reflect (duplicate (grid_to_block $0) south_west 6) false) teal) false) (touches_any_boundary (grid_to_block $0)) false))", "(lambda (to_original_grid_overlay (singleton_block (map_blocks (find_blocks_by_black_b $0 true true) (lambda (remove_color (move (grid_to_block $1) 2 north false) green)))) true))"]}], "programTimeout": 0.1}