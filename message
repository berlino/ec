{"tasks": [{"examples": [{"inputs": [{"grid": {"0,0": 9, "0,1": 0, "0,2": 0, "1,0": 9, "1,1": 9, "1,2": 9, "2,0": 9, "2,1": 9, "2,2": 9}}], "output": {"grid": {"0,0": 0, "0,1": 9, "0,2": 9, "1,0": 0, "1,1": 9, "1,2": 9, "2,0": 9, "2,1": 9, "2,2": 9}}}, {"inputs": [{"grid": {"0,0": 6, "0,1": 6, "0,2": 6, "1,0": 0, "1,1": 0, "1,2": 0, "2,0": 6, "2,1": 6, "2,2": 0}}], "output": {"grid": {"0,0": 6, "0,1": 0, "0,2": 0, "1,0": 6, "1,1": 0, "1,2": 6, "2,0": 6, "2,1": 0, "2,2": 6}}}, {"inputs": [{"grid": {"0,0": 0, "0,1": 0, "0,2": 9, "1,0": 0, "1,1": 0, "1,2": 9, "2,0": 9, "2,1": 9, "2,2": 9}}], "output": {"grid": {"0,0": 9, "0,1": 9, "0,2": 9, "1,0": 0, "1,1": 0, "1,2": 9, "2,0": 0, "2,1": 0, "2,2": 9}}}, {"inputs": [{"grid": {"0,0": 2, "0,1": 0, "0,2": 2, "1,0": 0, "1,1": 0, "1,2": 2, "2,0": 0, "2,1": 2, "2,2": 2}}], "output": {"grid": {"0,0": 2, "0,1": 2, "0,2": 2, "1,0": 0, "1,1": 0, "1,2": 2, "2,0": 2, "2,1": 0, "2,2": 0}}}], "name": "ed36ccf7.json", "request": {"constructor": "->", "arguments": [{"constructor": "tgridin", "arguments": []}, {"constructor": "tgridout", "arguments": []}]}, "programs": ["(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) false true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) false false))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 false false) false true))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 false false) false false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true true))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) true false))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true false) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true false) false false))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true true) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 true true) false false))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) false (negate_boolean true)))", "(lambda (blocks_to_min_grid (tiles_to_blocks (find_tiles_by_black_b $0)) false (negate_boolean false)))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false true))", "(lambda (blocks_to_min_grid (find_blocks_by_inferred_b $0 false false) false false))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 false true) true true))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 false true) true false))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 true true) false true))", "(lambda (blocks_to_min_grid (find_same_color_blocks $0 true true) false false))", "(lambda (blocks_to_min_grid (find_blocks_by_black_b $0 true true) true true))", "(lambda (blocks_to_min_grid (find_blocks_by_black_b $0 true true) true false))"]}], "programTimeout": 0.1}